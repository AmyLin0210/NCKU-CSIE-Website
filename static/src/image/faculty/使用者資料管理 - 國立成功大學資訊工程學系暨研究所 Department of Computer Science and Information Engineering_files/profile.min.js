/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/src/js/user/profile.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./models/common/maps/language.js":
/*!****************************************!*\
  !*** ./models/common/maps/language.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var deep_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! deep-freeze */ "./node_modules/deep-freeze/index.js");
/* harmony import */ var deep_freeze__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(deep_freeze__WEBPACK_IMPORTED_MODULE_0__);
/**
 * Language map module.
 * @namespace
 * @readonly
 * @property {string[]} support - Supporting language list.
 * @property {string}   default - Default language.
 */



const languageMap = {
    'support': [
        'zh-TW',
        'en-US',
    ],
    'default': 'zh-TW',
};

deep_freeze__WEBPACK_IMPORTED_MODULE_0___default()( languageMap );

/* harmony default export */ __webpack_exports__["default"] = (languageMap);


/***/ }),

/***/ "./models/common/utils/i18n.js":
/*!*************************************!*\
  !*** ./models/common/utils/i18n.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return I18nUtils; });
/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./language.js */ "./models/common/utils/language.js");
/**
 * I18nUtils module.
 *
 * All `^default*` and `^get*` methods should only return one of the following types:
 *     - `string`
 *     - `number`
 *     - `undefined`
 * All `^is*` methods should only return `boolean`.
 * All `^supported*` methods should return an `array` having following properties:
 *     - `configurable: true`
 *     - `writable: true`
 *     - `enumerable: true`.
 *
 * In each function call stack,
 * function `LanguageUtils.isSupportedLanguageId` should only be called at most once,
 * functions other than called function should also only be called at most once.
 */



class I18nUtils {
    constructor ( opt ) {
        const {
            defaultOption = null,
            i18n = null,
            map = null,
        } = opt || {};

        if ( defaultOption === null || i18n === null || map === null )
            throw new Error( 'Invalid arguments' );

        this.default = defaultOption;
        this.i18n = i18n;
        this.map = map;
    }

    defaultValue ( languageId = _language_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultLanguageId ) {
        if ( _language_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSupportedLanguageId( languageId ) )
            return this.i18n[ languageId ][ this.default ];
    }

    get defaultOption () {
        return this.default;
    }

    get defaultId () {
        return this.map.indexOf( this.default );
    }

    supportedValues ( languageId = _language_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultLanguageId ) {
        if ( _language_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSupportedLanguageId( languageId ) )
            return Array.from( this.map.map( option => this.i18n[ languageId ][ option ] ) );
        return [];
    }

    get supportedOptions () {
        return Array.from( this.map );
    }

    get supportedId () {
        return this.map.map( ( {}, index ) => index );
    }

    isSupportedValue ( opt ) {
        const {
            value = null,
            languageId = null,
        } = opt || {};

        if ( typeof ( value ) === 'string' )
            return this.supportedValues( languageId ).includes( value );
        return false;
    }

    isSupportedOption ( option = null ) {
        if ( typeof ( option ) === 'string' )
            return this.supportedOptions.includes( option );
        return false;
    }

    isSupportedId ( id = null ) {
        if ( typeof ( id ) === 'number' )
            return this.supportedId.includes( id );
        return false;
    }

    getValueByOption ( opt ) {
        const {
            option = null,
            languageId = null,
        } = opt || {};

        if ( this.isSupportedOption( option ) && _language_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSupportedLanguageId( languageId ) )
            return this.i18n[ languageId ][ option ];
    }

    getValueById ( opt ) {
        const {
            id = null,
            languageId = null,
        } = opt || {};

        if ( this.isSupportedId( id ) && _language_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSupportedLanguageId( languageId ) )
            return this.i18n[ languageId ][ this.map[ id ] ];
    }

    getOptionByValue ( opt ) {
        const {
            value = null,
            languageId = null,
        } = opt || {};

        if ( this.isSupportedValue( opt ) )
            return this.map.find( option => this.map[ languageId ][ option ] === value, this );
    }

    getOptionById ( id = null ) {
        if ( this.isSupportedId( id ) )
            return this.map[ id ];
    }

    getIdByValue ( opt ) {
        if ( this.isSupportedValue( opt ) )
            return this.map.indexOf( this.getOptionByValue( opt ) );
    }

    getIdByOption ( option = null ) {
        if ( this.isSupportedOption( option ) )
            return this.map.indexOf( option );
    }
}


/***/ }),

/***/ "./models/common/utils/language.js":
/*!*****************************************!*\
  !*** ./models/common/utils/language.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _maps_language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../maps/language.js */ "./models/common/maps/language.js");
/**
 * LanguageUtils module.
 *
 * All `^default*` and `^get*` methods should only return one of the following types:
 *     - `string`
 *     - `number`
 *     - `undefined`
 * All `^is*` methods should only return `boolean`.
 * All `^supported*` methods should return an `array` having following properties:
 *     - `configurable: true`
 *     - `writable: true`
 *     - `enumerable: true`
 *
 * In each function call stack,
 * functions other than called function should only be called at most once.
 */



class LanguageUtils {
    static get defaultLanguage () {
        return _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].default;
    }

    static get defaultLanguageId () {
        return _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].support.indexOf( _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].default );
    }

    static get supportedLanguage () {
        return Array.from( _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].support );
    }

    static get supportedLanguageId () {
        return _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].support.map( ( {}, index ) => index );
    }

    static isSupportedLanguage ( language = null ) {
        if ( typeof ( language ) === 'string' )
            return _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].support.includes( language );
        return false;
    }

    static isSupportedLanguageId ( languageId = null ) {
        if ( typeof ( languageId ) === 'number' )
            return LanguageUtils.supportedLanguageId.includes( languageId );
        return false;
    }

    static getLanguageId ( language = null ) {
        if ( LanguageUtils.isSupportedLanguage( language ) )
            return _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].support.indexOf( language );
    }

    static getLanguageById ( languageId = null ) {
        if ( LanguageUtils.isSupportedLanguageId( languageId ) )
            return _maps_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].support[ languageId ];
    }
}

/* harmony default export */ __webpack_exports__["default"] = (LanguageUtils);


/***/ }),

/***/ "./models/common/utils/validate.js":
/*!*****************************************!*\
  !*** ./models/common/utils/validate.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! validate.js */ "./node_modules/validate.js/validate.js");
/* harmony import */ var validate_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(validate_js__WEBPACK_IMPORTED_MODULE_0__);


class ValidateUtils {
    static isValidDate ( date ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isDate( date ) && !Number.isNaN( Number( date ) );
    }

    static isPositiveInteger ( number ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isInteger( number ) &&
            number > 0 &&
            number <= Number.MAX_SAFE_INTEGER;
    }

    static isValidId ( number ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber( number ) &&
            number >= 0 &&
            number <= Number.MAX_SAFE_INTEGER;
    }

    static isDomElement ( element ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isDomElement( element );
    }

    static isValidString ( str ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isString( str );
    }

    static isValidBoolean ( bool ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isInteger( bool ) &&
            ( bool === 0 || bool === 1 );
    }

    static isValidArray ( arr ) {
        return validate_js__WEBPACK_IMPORTED_MODULE_0___default.a.isArray( arr );
    }
}

/* harmony default export */ __webpack_exports__["default"] = (ValidateUtils);


/***/ }),

/***/ "./models/faculty/maps/degree.js":
/*!***************************************!*\
  !*** ./models/faculty/maps/degree.js ***!
  \***************************************/
/*! exports provided: default, defaultOption, i18n, map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultOption", function() { return defaultOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i18n", function() { return i18n; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony import */ var _common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/language.js */ "./models/common/utils/language.js");
/* harmony import */ var deep_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deep-freeze */ "./node_modules/deep-freeze/index.js");
/* harmony import */ var deep_freeze__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deep_freeze__WEBPACK_IMPORTED_MODULE_1__);



const map = [
    'bachelor',
    'master',
    'phd',
];

const defaultOption = 'bachelor';

const i18n = {
    [ _common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
        bachelor: 'bachelor',
        master:   'master',
        phd:      'phd',
    },
    [ _common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
        bachelor: '學士',
        master:   '碩士',
        phd:      '博士',
    },
};

deep_freeze__WEBPACK_IMPORTED_MODULE_1___default()( i18n );
deep_freeze__WEBPACK_IMPORTED_MODULE_1___default()( map );

/* harmony default export */ __webpack_exports__["default"] = ({
    defaultOption,
    i18n,
    map,
});




/***/ }),

/***/ "./models/faculty/maps/nation.js":
/*!***************************************!*\
  !*** ./models/faculty/maps/nation.js ***!
  \***************************************/
/*! exports provided: default, defaultOption, i18n, map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultOption", function() { return defaultOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i18n", function() { return i18n; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony import */ var _common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/language.js */ "./models/common/utils/language.js");
/* harmony import */ var deep_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deep-freeze */ "./node_modules/deep-freeze/index.js");
/* harmony import */ var deep_freeze__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deep_freeze__WEBPACK_IMPORTED_MODULE_1__);



/**
 * `map` should following ISO 3166-1.
 */

const map = [
    'tw',
    'us',
    'cn',
    'gb',
    'jp',
    'de',
    'au',
];

const defaultOption = 'tw';

const i18n = {
    [ _common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
        tw: 'Taiwan',
        us: 'USA',
        cn: 'China',
        gb: 'UK',
        jp: 'Japan',
        de: 'Germany',
        au: 'Australia',
    },
    [ _common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
        tw: '臺灣',
        us: '美國',
        cn: '中國',
        gb: '英國',
        jp: '日本',
        de: '德國',
        au: '澳洲',
    },
};

deep_freeze__WEBPACK_IMPORTED_MODULE_1___default()( i18n );
deep_freeze__WEBPACK_IMPORTED_MODULE_1___default()( map );

/* harmony default export */ __webpack_exports__["default"] = ({
    defaultOption,
    i18n,
    map,
});




/***/ }),

/***/ "./models/faculty/utils/degree.js":
/*!****************************************!*\
  !*** ./models/faculty/utils/degree.js ***!
  \****************************************/
/*! exports provided: degreeUtils, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "degreeUtils", function() { return degreeUtils; });
/* harmony import */ var _common_utils_i18n_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/i18n.js */ "./models/common/utils/i18n.js");
/* harmony import */ var _maps_degree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maps/degree.js */ "./models/faculty/maps/degree.js");



const degreeUtils = new _common_utils_i18n_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
    defaultOption: _maps_degree_js__WEBPACK_IMPORTED_MODULE_1__["defaultOption"],
    i18n: _maps_degree_js__WEBPACK_IMPORTED_MODULE_1__["i18n"],
    map: _maps_degree_js__WEBPACK_IMPORTED_MODULE_1__["map"],
} );

/* harmony default export */ __webpack_exports__["default"] = (degreeUtils);


/***/ }),

/***/ "./models/faculty/utils/nation.js":
/*!****************************************!*\
  !*** ./models/faculty/utils/nation.js ***!
  \****************************************/
/*! exports provided: nationUtils, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nationUtils", function() { return nationUtils; });
/* harmony import */ var _common_utils_i18n_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/i18n.js */ "./models/common/utils/i18n.js");
/* harmony import */ var _maps_nation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maps/nation.js */ "./models/faculty/maps/nation.js");



const nationUtils = new _common_utils_i18n_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
    defaultOption: _maps_nation_js__WEBPACK_IMPORTED_MODULE_1__["defaultOption"],
    i18n: _maps_nation_js__WEBPACK_IMPORTED_MODULE_1__["i18n"],
    map: _maps_nation_js__WEBPACK_IMPORTED_MODULE_1__["map"],
} );

/* harmony default export */ __webpack_exports__["default"] = (nationUtils);


/***/ }),

/***/ "./node_modules/deep-freeze/index.js":
/*!*******************************************!*\
  !*** ./node_modules/deep-freeze/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function deepFreeze (o) {
  Object.freeze(o);

  Object.getOwnPropertyNames(o).forEach(function (prop) {
    if (o.hasOwnProperty(prop)
    && o[prop] !== null
    && (typeof o[prop] === "object" || typeof o[prop] === "function")
    && !Object.isFrozen(o[prop])) {
      deepFreeze(o[prop]);
    }
  });
  
  return o;
};


/***/ }),

/***/ "./node_modules/pug-runtime/index.js":
/*!*******************************************!*\
  !*** ./node_modules/pug-runtime/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pug_has_own_property = Object.prototype.hasOwnProperty;

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = pug_merge;
function pug_merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = pug_merge(attrs, a[i]);
    }
    return attrs;
  }

  for (var key in b) {
    if (key === 'class') {
      var valA = a[key] || [];
      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
    } else if (key === 'style') {
      var valA = pug_style(a[key]);
      valA = valA && valA[valA.length - 1] !== ';' ? valA + ';' : valA;
      var valB = pug_style(b[key]);
      valB = valB && valB[valB.length - 1] !== ';' ? valB + ';' : valB;
      a[key] = valA + valB;
    } else {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Process array, object, or string as a string of classes delimited by a space.
 *
 * If `val` is an array, all members of it and its subarrays are counted as
 * classes. If `escaping` is an array, then whether or not the item in `val` is
 * escaped depends on the corresponding item in `escaping`. If `escaping` is
 * not an array, no escaping is done.
 *
 * If `val` is an object, all the keys whose value is truthy are counted as
 * classes. No escaping is done.
 *
 * If `val` is a string, it is counted as a class. No escaping is done.
 *
 * @param {(Array.<string>|Object.<string, boolean>|string)} val
 * @param {?Array.<string>} escaping
 * @return {String}
 */
exports.classes = pug_classes;
function pug_classes_array(val, escaping) {
  var classString = '', className, padding = '', escapeEnabled = Array.isArray(escaping);
  for (var i = 0; i < val.length; i++) {
    className = pug_classes(val[i]);
    if (!className) continue;
    escapeEnabled && escaping[i] && (className = pug_escape(className));
    classString = classString + padding + className;
    padding = ' ';
  }
  return classString;
}
function pug_classes_object(val) {
  var classString = '', padding = '';
  for (var key in val) {
    if (key && val[key] && pug_has_own_property.call(val, key)) {
      classString = classString + padding + key;
      padding = ' ';
    }
  }
  return classString;
}
function pug_classes(val, escaping) {
  if (Array.isArray(val)) {
    return pug_classes_array(val, escaping);
  } else if (val && typeof val === 'object') {
    return pug_classes_object(val);
  } else {
    return val || '';
  }
}

/**
 * Convert object or string to a string of CSS styles delimited by a semicolon.
 *
 * @param {(Object.<string, string>|string)} val
 * @return {String}
 */

exports.style = pug_style;
function pug_style(val) {
  if (!val) return '';
  if (typeof val === 'object') {
    var out = '';
    for (var style in val) {
      /* istanbul ignore else */
      if (pug_has_own_property.call(val, style)) {
        out = out + style + ':' + val[style] + ';';
      }
    }
    return out;
  } else {
    return val + '';
  }
};

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = pug_attr;
function pug_attr(key, val, escaped, terse) {
  if (val === false || val == null || !val && (key === 'class' || key === 'style')) {
    return '';
  }
  if (val === true) {
    return ' ' + (terse ? key : key + '="' + key + '"');
  }
  if (typeof val.toJSON === 'function') {
    val = val.toJSON();
  }
  if (typeof val !== 'string') {
    val = JSON.stringify(val);
    if (!escaped && val.indexOf('"') !== -1) {
      return ' ' + key + '=\'' + val.replace(/'/g, '&#39;') + '\'';
    }
  }
  if (escaped) val = pug_escape(val);
  return ' ' + key + '="' + val + '"';
};

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} terse whether to use HTML5 terse boolean attributes
 * @return {String}
 */
exports.attrs = pug_attrs;
function pug_attrs(obj, terse){
  var attrs = '';

  for (var key in obj) {
    if (pug_has_own_property.call(obj, key)) {
      var val = obj[key];

      if ('class' === key) {
        val = pug_classes(val);
        attrs = pug_attr(key, val, false, terse) + attrs;
        continue;
      }
      if ('style' === key) {
        val = pug_style(val);
      }
      attrs += pug_attr(key, val, false, terse);
    }
  }

  return attrs;
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var pug_match_html = /["&<>]/;
exports.escape = pug_escape;
function pug_escape(_html){
  var html = '' + _html;
  var regexResult = pug_match_html.exec(html);
  if (!regexResult) return _html;

  var result = '';
  var i, lastIndex, escape;
  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
    switch (html.charCodeAt(i)) {
      case 34: escape = '&quot;'; break;
      case 38: escape = '&amp;'; break;
      case 60: escape = '&lt;'; break;
      case 62: escape = '&gt;'; break;
      default: continue;
    }
    if (lastIndex !== i) result += html.substring(lastIndex, i);
    lastIndex = i + 1;
    result += escape;
  }
  if (lastIndex !== i) return result + html.substring(lastIndex, i);
  else return result;
};

/**
 * Re-throw the given `err` in context to the
 * the pug in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @param {String} str original source
 * @api private
 */

exports.rethrow = pug_rethrow;
function pug_rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str = str || __webpack_require__(/*! fs */ 0).readFileSync(filename, 'utf8')
  } catch (ex) {
    pug_rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Pug') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};


/***/ }),

/***/ "./node_modules/validate.js/validate.js":
/*!**********************************************!*\
  !*** ./node_modules/validate.js/validate.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {/*!
 * validate.js 0.13.1
 *
 * (c) 2013-2019 Nicklas Ansman, 2013 Wrapp
 * Validate.js may be freely distributed under the MIT license.
 * For all details and documentation:
 * http://validatejs.org/
 */

(function(exports, module, define) {
  "use strict";

  // The main function that calls the validators specified by the constraints.
  // The options are the following:
  //   - format (string) - An option that controls how the returned value is formatted
  //     * flat - Returns a flat array of just the error messages
  //     * grouped - Returns the messages grouped by attribute (default)
  //     * detailed - Returns an array of the raw validation data
  //   - fullMessages (boolean) - If `true` (default) the attribute name is prepended to the error.
  //
  // Please note that the options are also passed to each validator.
  var validate = function(attributes, constraints, options) {
    options = v.extend({}, v.options, options);

    var results = v.runValidations(attributes, constraints, options)
      , attr
      , validator;

    if (results.some(function(r) { return v.isPromise(r.error); })) {
      throw new Error("Use validate.async if you want support for promises");
    }
    return validate.processValidationResults(results, options);
  };

  var v = validate;

  // Copies over attributes from one or more sources to a single destination.
  // Very much similar to underscore's extend.
  // The first argument is the target object and the remaining arguments will be
  // used as sources.
  v.extend = function(obj) {
    [].slice.call(arguments, 1).forEach(function(source) {
      for (var attr in source) {
        obj[attr] = source[attr];
      }
    });
    return obj;
  };

  v.extend(validate, {
    // This is the version of the library as a semver.
    // The toString function will allow it to be coerced into a string
    version: {
      major: 0,
      minor: 13,
      patch: 1,
      metadata: null,
      toString: function() {
        var version = v.format("%{major}.%{minor}.%{patch}", v.version);
        if (!v.isEmpty(v.version.metadata)) {
          version += "+" + v.version.metadata;
        }
        return version;
      }
    },

    // Below is the dependencies that are used in validate.js

    // The constructor of the Promise implementation.
    // If you are using Q.js, RSVP or any other A+ compatible implementation
    // override this attribute to be the constructor of that promise.
    // Since jQuery promises aren't A+ compatible they won't work.
    Promise: typeof Promise !== "undefined" ? Promise : /* istanbul ignore next */ null,

    EMPTY_STRING_REGEXP: /^\s*$/,

    // Runs the validators specified by the constraints object.
    // Will return an array of the format:
    //     [{attribute: "<attribute name>", error: "<validation result>"}, ...]
    runValidations: function(attributes, constraints, options) {
      var results = []
        , attr
        , validatorName
        , value
        , validators
        , validator
        , validatorOptions
        , error;

      if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {
        attributes = v.collectFormValues(attributes);
      }

      // Loops through each constraints, finds the correct validator and run it.
      for (attr in constraints) {
        value = v.getDeepObjectValue(attributes, attr);
        // This allows the constraints for an attribute to be a function.
        // The function will be called with the value, attribute name, the complete dict of
        // attributes as well as the options and constraints passed in.
        // This is useful when you want to have different
        // validations depending on the attribute value.
        validators = v.result(constraints[attr], value, attributes, attr, options, constraints);

        for (validatorName in validators) {
          validator = v.validators[validatorName];

          if (!validator) {
            error = v.format("Unknown validator %{name}", {name: validatorName});
            throw new Error(error);
          }

          validatorOptions = validators[validatorName];
          // This allows the options to be a function. The function will be
          // called with the value, attribute name, the complete dict of
          // attributes as well as the options and constraints passed in.
          // This is useful when you want to have different
          // validations depending on the attribute value.
          validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);
          if (!validatorOptions) {
            continue;
          }
          results.push({
            attribute: attr,
            value: value,
            validator: validatorName,
            globalOptions: options,
            attributes: attributes,
            options: validatorOptions,
            error: validator.call(validator,
                value,
                validatorOptions,
                attr,
                attributes,
                options)
          });
        }
      }

      return results;
    },

    // Takes the output from runValidations and converts it to the correct
    // output format.
    processValidationResults: function(errors, options) {
      errors = v.pruneEmptyErrors(errors, options);
      errors = v.expandMultipleErrors(errors, options);
      errors = v.convertErrorMessages(errors, options);

      var format = options.format || "grouped";

      if (typeof v.formatters[format] === 'function') {
        errors = v.formatters[format](errors);
      } else {
        throw new Error(v.format("Unknown format %{format}", options));
      }

      return v.isEmpty(errors) ? undefined : errors;
    },

    // Runs the validations with support for promises.
    // This function will return a promise that is settled when all the
    // validation promises have been completed.
    // It can be called even if no validations returned a promise.
    async: function(attributes, constraints, options) {
      options = v.extend({}, v.async.options, options);

      var WrapErrors = options.wrapErrors || function(errors) {
        return errors;
      };

      // Removes unknown attributes
      if (options.cleanAttributes !== false) {
        attributes = v.cleanAttributes(attributes, constraints);
      }

      var results = v.runValidations(attributes, constraints, options);

      return new v.Promise(function(resolve, reject) {
        v.waitForResults(results).then(function() {
          var errors = v.processValidationResults(results, options);
          if (errors) {
            reject(new WrapErrors(errors, options, attributes, constraints));
          } else {
            resolve(attributes);
          }
        }, function(err) {
          reject(err);
        });
      });
    },

    single: function(value, constraints, options) {
      options = v.extend({}, v.single.options, options, {
        format: "flat",
        fullMessages: false
      });
      return v({single: value}, {single: constraints}, options);
    },

    // Returns a promise that is resolved when all promises in the results array
    // are settled. The promise returned from this function is always resolved,
    // never rejected.
    // This function modifies the input argument, it replaces the promises
    // with the value returned from the promise.
    waitForResults: function(results) {
      // Create a sequence of all the results starting with a resolved promise.
      return results.reduce(function(memo, result) {
        // If this result isn't a promise skip it in the sequence.
        if (!v.isPromise(result.error)) {
          return memo;
        }

        return memo.then(function() {
          return result.error.then(function(error) {
            result.error = error || null;
          });
        });
      }, new v.Promise(function(r) { r(); })); // A resolved promise
    },

    // If the given argument is a call: function the and: function return the value
    // otherwise just return the value. Additional arguments will be passed as
    // arguments to the function.
    // Example:
    // ```
    // result('foo') // 'foo'
    // result(Math.max, 1, 2) // 2
    // ```
    result: function(value) {
      var args = [].slice.call(arguments, 1);
      if (typeof value === 'function') {
        value = value.apply(null, args);
      }
      return value;
    },

    // Checks if the value is a number. This function does not consider NaN a
    // number like many other `isNumber` functions do.
    isNumber: function(value) {
      return typeof value === 'number' && !isNaN(value);
    },

    // Returns false if the object is not a function
    isFunction: function(value) {
      return typeof value === 'function';
    },

    // A simple check to verify that the value is an integer. Uses `isNumber`
    // and a simple modulo check.
    isInteger: function(value) {
      return v.isNumber(value) && value % 1 === 0;
    },

    // Checks if the value is a boolean
    isBoolean: function(value) {
      return typeof value === 'boolean';
    },

    // Uses the `Object` function to check if the given argument is an object.
    isObject: function(obj) {
      return obj === Object(obj);
    },

    // Simply checks if the object is an instance of a date
    isDate: function(obj) {
      return obj instanceof Date;
    },

    // Returns false if the object is `null` of `undefined`
    isDefined: function(obj) {
      return obj !== null && obj !== undefined;
    },

    // Checks if the given argument is a promise. Anything with a `then`
    // function is considered a promise.
    isPromise: function(p) {
      return !!p && v.isFunction(p.then);
    },

    isJqueryElement: function(o) {
      return o && v.isString(o.jquery);
    },

    isDomElement: function(o) {
      if (!o) {
        return false;
      }

      if (!o.querySelectorAll || !o.querySelector) {
        return false;
      }

      if (v.isObject(document) && o === document) {
        return true;
      }

      // http://stackoverflow.com/a/384380/699304
      /* istanbul ignore else */
      if (typeof HTMLElement === "object") {
        return o instanceof HTMLElement;
      } else {
        return o &&
          typeof o === "object" &&
          o !== null &&
          o.nodeType === 1 &&
          typeof o.nodeName === "string";
      }
    },

    isEmpty: function(value) {
      var attr;

      // Null and undefined are empty
      if (!v.isDefined(value)) {
        return true;
      }

      // functions are non empty
      if (v.isFunction(value)) {
        return false;
      }

      // Whitespace only strings are empty
      if (v.isString(value)) {
        return v.EMPTY_STRING_REGEXP.test(value);
      }

      // For arrays we use the length property
      if (v.isArray(value)) {
        return value.length === 0;
      }

      // Dates have no attributes but aren't empty
      if (v.isDate(value)) {
        return false;
      }

      // If we find at least one property we consider it non empty
      if (v.isObject(value)) {
        for (attr in value) {
          return false;
        }
        return true;
      }

      return false;
    },

    // Formats the specified strings with the given values like so:
    // ```
    // format("Foo: %{foo}", {foo: "bar"}) // "Foo bar"
    // ```
    // If you want to write %{...} without having it replaced simply
    // prefix it with % like this `Foo: %%{foo}` and it will be returned
    // as `"Foo: %{foo}"`
    format: v.extend(function(str, vals) {
      if (!v.isString(str)) {
        return str;
      }
      return str.replace(v.format.FORMAT_REGEXP, function(m0, m1, m2) {
        if (m1 === '%') {
          return "%{" + m2 + "}";
        } else {
          return String(vals[m2]);
        }
      });
    }, {
      // Finds %{key} style patterns in the given string
      FORMAT_REGEXP: /(%?)%\{([^\}]+)\}/g
    }),

    // "Prettifies" the given string.
    // Prettifying means replacing [.\_-] with spaces as well as splitting
    // camel case words.
    prettify: function(str) {
      if (v.isNumber(str)) {
        // If there are more than 2 decimals round it to two
        if ((str * 100) % 1 === 0) {
          return "" + str;
        } else {
          return parseFloat(Math.round(str * 100) / 100).toFixed(2);
        }
      }

      if (v.isArray(str)) {
        return str.map(function(s) { return v.prettify(s); }).join(", ");
      }

      if (v.isObject(str)) {
        if (!v.isDefined(str.toString)) {
          return JSON.stringify(str);
        }

        return str.toString();
      }

      // Ensure the string is actually a string
      str = "" + str;

      return str
        // Splits keys separated by periods
        .replace(/([^\s])\.([^\s])/g, '$1 $2')
        // Removes backslashes
        .replace(/\\+/g, '')
        // Replaces - and - with space
        .replace(/[_-]/g, ' ')
        // Splits camel cased words
        .replace(/([a-z])([A-Z])/g, function(m0, m1, m2) {
          return "" + m1 + " " + m2.toLowerCase();
        })
        .toLowerCase();
    },

    stringifyValue: function(value, options) {
      var prettify = options && options.prettify || v.prettify;
      return prettify(value);
    },

    isString: function(value) {
      return typeof value === 'string';
    },

    isArray: function(value) {
      return {}.toString.call(value) === '[object Array]';
    },

    // Checks if the object is a hash, which is equivalent to an object that
    // is neither an array nor a function.
    isHash: function(value) {
      return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);
    },

    contains: function(obj, value) {
      if (!v.isDefined(obj)) {
        return false;
      }
      if (v.isArray(obj)) {
        return obj.indexOf(value) !== -1;
      }
      return value in obj;
    },

    unique: function(array) {
      if (!v.isArray(array)) {
        return array;
      }
      return array.filter(function(el, index, array) {
        return array.indexOf(el) == index;
      });
    },

    forEachKeyInKeypath: function(object, keypath, callback) {
      if (!v.isString(keypath)) {
        return undefined;
      }

      var key = ""
        , i
        , escape = false;

      for (i = 0; i < keypath.length; ++i) {
        switch (keypath[i]) {
          case '.':
            if (escape) {
              escape = false;
              key += '.';
            } else {
              object = callback(object, key, false);
              key = "";
            }
            break;

          case '\\':
            if (escape) {
              escape = false;
              key += '\\';
            } else {
              escape = true;
            }
            break;

          default:
            escape = false;
            key += keypath[i];
            break;
        }
      }

      return callback(object, key, true);
    },

    getDeepObjectValue: function(obj, keypath) {
      if (!v.isObject(obj)) {
        return undefined;
      }

      return v.forEachKeyInKeypath(obj, keypath, function(obj, key) {
        if (v.isObject(obj)) {
          return obj[key];
        }
      });
    },

    // This returns an object with all the values of the form.
    // It uses the input name as key and the value as value
    // So for example this:
    // <input type="text" name="email" value="foo@bar.com" />
    // would return:
    // {email: "foo@bar.com"}
    collectFormValues: function(form, options) {
      var values = {}
        , i
        , j
        , input
        , inputs
        , option
        , value;

      if (v.isJqueryElement(form)) {
        form = form[0];
      }

      if (!form) {
        return values;
      }

      options = options || {};

      inputs = form.querySelectorAll("input[name], textarea[name]");
      for (i = 0; i < inputs.length; ++i) {
        input = inputs.item(i);

        if (v.isDefined(input.getAttribute("data-ignored"))) {
          continue;
        }

        var name = input.name.replace(/\./g, "\\\\.");
        value = v.sanitizeFormValue(input.value, options);
        if (input.type === "number") {
          value = value ? +value : null;
        } else if (input.type === "checkbox") {
          if (input.attributes.value) {
            if (!input.checked) {
              value = values[name] || null;
            }
          } else {
            value = input.checked;
          }
        } else if (input.type === "radio") {
          if (!input.checked) {
            value = values[name] || null;
          }
        }
        values[name] = value;
      }

      inputs = form.querySelectorAll("select[name]");
      for (i = 0; i < inputs.length; ++i) {
        input = inputs.item(i);
        if (v.isDefined(input.getAttribute("data-ignored"))) {
          continue;
        }

        if (input.multiple) {
          value = [];
          for (j in input.options) {
            option = input.options[j];
             if (option && option.selected) {
              value.push(v.sanitizeFormValue(option.value, options));
            }
          }
        } else {
          var _val = typeof input.options[input.selectedIndex] !== 'undefined' ? input.options[input.selectedIndex].value : /* istanbul ignore next */ '';
          value = v.sanitizeFormValue(_val, options);
        }
        values[input.name] = value;
      }

      return values;
    },

    sanitizeFormValue: function(value, options) {
      if (options.trim && v.isString(value)) {
        value = value.trim();
      }

      if (options.nullify !== false && value === "") {
        return null;
      }
      return value;
    },

    capitalize: function(str) {
      if (!v.isString(str)) {
        return str;
      }
      return str[0].toUpperCase() + str.slice(1);
    },

    // Remove all errors who's error attribute is empty (null or undefined)
    pruneEmptyErrors: function(errors) {
      return errors.filter(function(error) {
        return !v.isEmpty(error.error);
      });
    },

    // In
    // [{error: ["err1", "err2"], ...}]
    // Out
    // [{error: "err1", ...}, {error: "err2", ...}]
    //
    // All attributes in an error with multiple messages are duplicated
    // when expanding the errors.
    expandMultipleErrors: function(errors) {
      var ret = [];
      errors.forEach(function(error) {
        // Removes errors without a message
        if (v.isArray(error.error)) {
          error.error.forEach(function(msg) {
            ret.push(v.extend({}, error, {error: msg}));
          });
        } else {
          ret.push(error);
        }
      });
      return ret;
    },

    // Converts the error mesages by prepending the attribute name unless the
    // message is prefixed by ^
    convertErrorMessages: function(errors, options) {
      options = options || {};

      var ret = []
        , prettify = options.prettify || v.prettify;
      errors.forEach(function(errorInfo) {
        var error = v.result(errorInfo.error,
            errorInfo.value,
            errorInfo.attribute,
            errorInfo.options,
            errorInfo.attributes,
            errorInfo.globalOptions);

        if (!v.isString(error)) {
          ret.push(errorInfo);
          return;
        }

        if (error[0] === '^') {
          error = error.slice(1);
        } else if (options.fullMessages !== false) {
          error = v.capitalize(prettify(errorInfo.attribute)) + " " + error;
        }
        error = error.replace(/\\\^/g, "^");
        error = v.format(error, {
          value: v.stringifyValue(errorInfo.value, options)
        });
        ret.push(v.extend({}, errorInfo, {error: error}));
      });
      return ret;
    },

    // In:
    // [{attribute: "<attributeName>", ...}]
    // Out:
    // {"<attributeName>": [{attribute: "<attributeName>", ...}]}
    groupErrorsByAttribute: function(errors) {
      var ret = {};
      errors.forEach(function(error) {
        var list = ret[error.attribute];
        if (list) {
          list.push(error);
        } else {
          ret[error.attribute] = [error];
        }
      });
      return ret;
    },

    // In:
    // [{error: "<message 1>", ...}, {error: "<message 2>", ...}]
    // Out:
    // ["<message 1>", "<message 2>"]
    flattenErrorsToArray: function(errors) {
      return errors
        .map(function(error) { return error.error; })
        .filter(function(value, index, self) {
          return self.indexOf(value) === index;
        });
    },

    cleanAttributes: function(attributes, whitelist) {
      function whitelistCreator(obj, key, last) {
        if (v.isObject(obj[key])) {
          return obj[key];
        }
        return (obj[key] = last ? true : {});
      }

      function buildObjectWhitelist(whitelist) {
        var ow = {}
          , lastObject
          , attr;
        for (attr in whitelist) {
          if (!whitelist[attr]) {
            continue;
          }
          v.forEachKeyInKeypath(ow, attr, whitelistCreator);
        }
        return ow;
      }

      function cleanRecursive(attributes, whitelist) {
        if (!v.isObject(attributes)) {
          return attributes;
        }

        var ret = v.extend({}, attributes)
          , w
          , attribute;

        for (attribute in attributes) {
          w = whitelist[attribute];

          if (v.isObject(w)) {
            ret[attribute] = cleanRecursive(ret[attribute], w);
          } else if (!w) {
            delete ret[attribute];
          }
        }
        return ret;
      }

      if (!v.isObject(whitelist) || !v.isObject(attributes)) {
        return {};
      }

      whitelist = buildObjectWhitelist(whitelist);
      return cleanRecursive(attributes, whitelist);
    },

    exposeModule: function(validate, root, exports, module, define) {
      if (exports) {
        if (module && module.exports) {
          exports = module.exports = validate;
        }
        exports.validate = validate;
      } else {
        root.validate = validate;
        if (validate.isFunction(define) && define.amd) {
          define([], function () { return validate; });
        }
      }
    },

    warn: function(msg) {
      if (typeof console !== "undefined" && console.warn) {
        console.warn("[validate.js] " + msg);
      }
    },

    error: function(msg) {
      if (typeof console !== "undefined" && console.error) {
        console.error("[validate.js] " + msg);
      }
    }
  });

  validate.validators = {
    // Presence validates that the value isn't empty
    presence: function(value, options) {
      options = v.extend({}, this.options, options);
      if (options.allowEmpty !== false ? !v.isDefined(value) : v.isEmpty(value)) {
        return options.message || this.message || "can't be blank";
      }
    },
    length: function(value, options, attribute) {
      // Empty values are allowed
      if (!v.isDefined(value)) {
        return;
      }

      options = v.extend({}, this.options, options);

      var is = options.is
        , maximum = options.maximum
        , minimum = options.minimum
        , tokenizer = options.tokenizer || function(val) { return val; }
        , err
        , errors = [];

      value = tokenizer(value);
      var length = value.length;
      if(!v.isNumber(length)) {
        return options.message || this.notValid || "has an incorrect length";
      }

      // Is checks
      if (v.isNumber(is) && length !== is) {
        err = options.wrongLength ||
          this.wrongLength ||
          "is the wrong length (should be %{count} characters)";
        errors.push(v.format(err, {count: is}));
      }

      if (v.isNumber(minimum) && length < minimum) {
        err = options.tooShort ||
          this.tooShort ||
          "is too short (minimum is %{count} characters)";
        errors.push(v.format(err, {count: minimum}));
      }

      if (v.isNumber(maximum) && length > maximum) {
        err = options.tooLong ||
          this.tooLong ||
          "is too long (maximum is %{count} characters)";
        errors.push(v.format(err, {count: maximum}));
      }

      if (errors.length > 0) {
        return options.message || errors;
      }
    },
    numericality: function(value, options, attribute, attributes, globalOptions) {
      // Empty values are fine
      if (!v.isDefined(value)) {
        return;
      }

      options = v.extend({}, this.options, options);

      var errors = []
        , name
        , count
        , checks = {
            greaterThan:          function(v, c) { return v > c; },
            greaterThanOrEqualTo: function(v, c) { return v >= c; },
            equalTo:              function(v, c) { return v === c; },
            lessThan:             function(v, c) { return v < c; },
            lessThanOrEqualTo:    function(v, c) { return v <= c; },
            divisibleBy:          function(v, c) { return v % c === 0; }
          }
        , prettify = options.prettify ||
          (globalOptions && globalOptions.prettify) ||
          v.prettify;

      // Strict will check that it is a valid looking number
      if (v.isString(value) && options.strict) {
        var pattern = "^-?(0|[1-9]\\d*)";
        if (!options.onlyInteger) {
          pattern += "(\\.\\d+)?";
        }
        pattern += "$";

        if (!(new RegExp(pattern).test(value))) {
          return options.message ||
            options.notValid ||
            this.notValid ||
            this.message ||
            "must be a valid number";
        }
      }

      // Coerce the value to a number unless we're being strict.
      if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {
        value = +value;
      }

      // If it's not a number we shouldn't continue since it will compare it.
      if (!v.isNumber(value)) {
        return options.message ||
          options.notValid ||
          this.notValid ||
          this.message ||
          "is not a number";
      }

      // Same logic as above, sort of. Don't bother with comparisons if this
      // doesn't pass.
      if (options.onlyInteger && !v.isInteger(value)) {
        return options.message ||
          options.notInteger ||
          this.notInteger ||
          this.message ||
          "must be an integer";
      }

      for (name in checks) {
        count = options[name];
        if (v.isNumber(count) && !checks[name](value, count)) {
          // This picks the default message if specified
          // For example the greaterThan check uses the message from
          // this.notGreaterThan so we capitalize the name and prepend "not"
          var key = "not" + v.capitalize(name);
          var msg = options[key] ||
            this[key] ||
            this.message ||
            "must be %{type} %{count}";

          errors.push(v.format(msg, {
            count: count,
            type: prettify(name)
          }));
        }
      }

      if (options.odd && value % 2 !== 1) {
        errors.push(options.notOdd ||
            this.notOdd ||
            this.message ||
            "must be odd");
      }
      if (options.even && value % 2 !== 0) {
        errors.push(options.notEven ||
            this.notEven ||
            this.message ||
            "must be even");
      }

      if (errors.length) {
        return options.message || errors;
      }
    },
    datetime: v.extend(function(value, options) {
      if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {
        throw new Error("Both the parse and format functions needs to be set to use the datetime/date validator");
      }

      // Empty values are fine
      if (!v.isDefined(value)) {
        return;
      }

      options = v.extend({}, this.options, options);

      var err
        , errors = []
        , earliest = options.earliest ? this.parse(options.earliest, options) : NaN
        , latest = options.latest ? this.parse(options.latest, options) : NaN;

      value = this.parse(value, options);

      // 86400000 is the number of milliseconds in a day, this is used to remove
      // the time from the date
      if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {
        err = options.notValid ||
          options.message ||
          this.notValid ||
          "must be a valid date";
        return v.format(err, {value: arguments[0]});
      }

      if (!isNaN(earliest) && value < earliest) {
        err = options.tooEarly ||
          options.message ||
          this.tooEarly ||
          "must be no earlier than %{date}";
        err = v.format(err, {
          value: this.format(value, options),
          date: this.format(earliest, options)
        });
        errors.push(err);
      }

      if (!isNaN(latest) && value > latest) {
        err = options.tooLate ||
          options.message ||
          this.tooLate ||
          "must be no later than %{date}";
        err = v.format(err, {
          date: this.format(latest, options),
          value: this.format(value, options)
        });
        errors.push(err);
      }

      if (errors.length) {
        return v.unique(errors);
      }
    }, {
      parse: null,
      format: null
    }),
    date: function(value, options) {
      options = v.extend({}, options, {dateOnly: true});
      return v.validators.datetime.call(v.validators.datetime, value, options);
    },
    format: function(value, options) {
      if (v.isString(options) || (options instanceof RegExp)) {
        options = {pattern: options};
      }

      options = v.extend({}, this.options, options);

      var message = options.message || this.message || "is invalid"
        , pattern = options.pattern
        , match;

      // Empty values are allowed
      if (!v.isDefined(value)) {
        return;
      }
      if (!v.isString(value)) {
        return message;
      }

      if (v.isString(pattern)) {
        pattern = new RegExp(options.pattern, options.flags);
      }
      match = pattern.exec(value);
      if (!match || match[0].length != value.length) {
        return message;
      }
    },
    inclusion: function(value, options) {
      // Empty values are fine
      if (!v.isDefined(value)) {
        return;
      }
      if (v.isArray(options)) {
        options = {within: options};
      }
      options = v.extend({}, this.options, options);
      if (v.contains(options.within, value)) {
        return;
      }
      var message = options.message ||
        this.message ||
        "^%{value} is not included in the list";
      return v.format(message, {value: value});
    },
    exclusion: function(value, options) {
      // Empty values are fine
      if (!v.isDefined(value)) {
        return;
      }
      if (v.isArray(options)) {
        options = {within: options};
      }
      options = v.extend({}, this.options, options);
      if (!v.contains(options.within, value)) {
        return;
      }
      var message = options.message || this.message || "^%{value} is restricted";
      if (v.isString(options.within[value])) {
        value = options.within[value];
      }
      return v.format(message, {value: value});
    },
    email: v.extend(function(value, options) {
      options = v.extend({}, this.options, options);
      var message = options.message || this.message || "is not a valid email";
      // Empty values are fine
      if (!v.isDefined(value)) {
        return;
      }
      if (!v.isString(value)) {
        return message;
      }
      if (!this.PATTERN.exec(value)) {
        return message;
      }
    }, {
      PATTERN: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i
    }),
    equality: function(value, options, attribute, attributes, globalOptions) {
      if (!v.isDefined(value)) {
        return;
      }

      if (v.isString(options)) {
        options = {attribute: options};
      }
      options = v.extend({}, this.options, options);
      var message = options.message ||
        this.message ||
        "is not equal to %{attribute}";

      if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {
        throw new Error("The attribute must be a non empty string");
      }

      var otherValue = v.getDeepObjectValue(attributes, options.attribute)
        , comparator = options.comparator || function(v1, v2) {
          return v1 === v2;
        }
        , prettify = options.prettify ||
          (globalOptions && globalOptions.prettify) ||
          v.prettify;

      if (!comparator(value, otherValue, options, attribute, attributes)) {
        return v.format(message, {attribute: prettify(options.attribute)});
      }
    },
    // A URL validator that is used to validate URLs with the ability to
    // restrict schemes and some domains.
    url: function(value, options) {
      if (!v.isDefined(value)) {
        return;
      }

      options = v.extend({}, this.options, options);

      var message = options.message || this.message || "is not a valid url"
        , schemes = options.schemes || this.schemes || ['http', 'https']
        , allowLocal = options.allowLocal || this.allowLocal || false
        , allowDataUrl = options.allowDataUrl || this.allowDataUrl || false;
      if (!v.isString(value)) {
        return message;
      }

      // https://gist.github.com/dperini/729294
      var regex =
        "^" +
        // protocol identifier
        "(?:(?:" + schemes.join("|") + ")://)" +
        // user:pass authentication
        "(?:\\S+(?::\\S*)?@)?" +
        "(?:";

      var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";

      if (allowLocal) {
        tld += "?";
      } else {
        regex +=
          // IP address exclusion
          // private & local networks
          "(?!(?:10|127)(?:\\.\\d{1,3}){3})" +
          "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" +
          "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})";
      }

      regex +=
          // IP address dotted notation octets
          // excludes loopback network 0.0.0.0
          // excludes reserved space >= 224.0.0.0
          // excludes network & broacast addresses
          // (first & last IP address of each class)
          "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" +
          "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" +
          "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" +
        "|" +
          // host name
          "(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)" +
          // domain name
          "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" +
          tld +
        ")" +
        // port number
        "(?::\\d{2,5})?" +
        // resource path
        "(?:[/?#]\\S*)?" +
      "$";

      if (allowDataUrl) {
        // RFC 2397
        var mediaType = "\\w+\\/[-+.\\w]+(?:;[\\w=]+)*";
        var urlchar = "[A-Za-z0-9-_.!~\\*'();\\/?:@&=+$,%]*";
        var dataurl = "data:(?:"+mediaType+")?(?:;base64)?,"+urlchar;
        regex = "(?:"+regex+")|(?:^"+dataurl+"$)";
      }

      var PATTERN = new RegExp(regex, 'i');
      if (!PATTERN.exec(value)) {
        return message;
      }
    },
    type: v.extend(function(value, originalOptions, attribute, attributes, globalOptions) {
      if (v.isString(originalOptions)) {
        originalOptions = {type: originalOptions};
      }

      if (!v.isDefined(value)) {
        return;
      }

      var options = v.extend({}, this.options, originalOptions);

      var type = options.type;
      if (!v.isDefined(type)) {
        throw new Error("No type was specified");
      }

      var check;
      if (v.isFunction(type)) {
        check = type;
      } else {
        check = this.types[type];
      }

      if (!v.isFunction(check)) {
        throw new Error("validate.validators.type.types." + type + " must be a function.");
      }

      if (!check(value, options, attribute, attributes, globalOptions)) {
        var message = originalOptions.message ||
          this.messages[type] ||
          this.message ||
          options.message ||
          (v.isFunction(type) ? "must be of the correct type" : "must be of type %{type}");

        if (v.isFunction(message)) {
          message = message(value, originalOptions, attribute, attributes, globalOptions);
        }

        return v.format(message, {attribute: v.prettify(attribute), type: type});
      }
    }, {
      types: {
        object: function(value) {
          return v.isObject(value) && !v.isArray(value);
        },
        array: v.isArray,
        integer: v.isInteger,
        number: v.isNumber,
        string: v.isString,
        date: v.isDate,
        boolean: v.isBoolean
      },
      messages: {}
    })
  };

  validate.formatters = {
    detailed: function(errors) {return errors;},
    flat: v.flattenErrorsToArray,
    grouped: function(errors) {
      var attr;

      errors = v.groupErrorsByAttribute(errors);
      for (attr in errors) {
        errors[attr] = v.flattenErrorsToArray(errors[attr]);
      }
      return errors;
    },
    constraint: function(errors) {
      var attr;
      errors = v.groupErrorsByAttribute(errors);
      for (attr in errors) {
        errors[attr] = errors[attr].map(function(result) {
          return result.validator;
        }).sort();
      }
      return errors;
    }
  };

  validate.exposeModule(validate, this, exports, module, __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js"));
}).call(this,
         true ? /* istanbul ignore next */ exports : undefined,
         true ? /* istanbul ignore next */ module : undefined,
        __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js"));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-define.js":
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./settings/server/config.js":
/*!***********************************!*\
  !*** ./settings/server/config.js ***!
  \***********************************/
/*! exports provided: domainName, host, maxAge, port, projectRoot, protocol, secret, staticHost, whiteList, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "domainName", function() { return domainName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "host", function() { return host; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxAge", function() { return maxAge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "port", function() { return port; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "projectRoot", function() { return projectRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "protocol", function() { return protocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "secret", function() { return secret; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticHost", function() { return staticHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whiteList", function() { return whiteList; });
/**
 * Web server settings module.
 * @namespace
 * @readonly
 * @property {string} domainName  - Web server domain name/IP.
 * @property {string} host        - Web server host.
 * @property {number} maxAge      - Client maximum time to cache result.
 * @property {number} port        - Web server binding port.
 * @property {string} projectRoot - This very project's root path.
 * @property {string} protocol    - Web server protocol, can be either 'http' or 'https'.
 * @property {string} secret      - secret key used to sign cookie.
 * @property {string} staticHost  - Static file server host.
 * @property {string[]} whiteList - Acceptable host list for Content Security Policy.
 */

const config = {
    domainName:  'localhost',
    get host () {
        return `${ config.protocol }://${ config.domainName }${
            config.port === '80' || config.port === '443' ?
                '' :
                `:${ config.port }`
        }`;
    },
    maxAge:      1000 * 60 * 60 * 24 * 7,
    port:        3000,
    projectRoot: '',
    protocol:    'http',
    secret:      'deepest darkest secret of ncku csie',
    get staticHost () {
        return `${ config.host }/static`;
    },
    whiteList: [
        'localhost:3000',
        'localhost:3001',
        'www.csie.ncku.edu.tw',
    ],
};

Object.freeze( config );

const domainName = config.domainName;
const host = config.host;
const maxAge = config.maxAge;
const port = config.port;
const projectRoot = '/Users/0210amy/Desktop/school/web/NCKU-CSIE-Website';
const protocol = config.protocol;
const secret = config.secret;
const staticHost = config.staticHost;
const whiteList = config.whiteList;
/* harmony default export */ __webpack_exports__["default"] = (config);


/***/ }),

/***/ "./static/src/js/components/common/header-base.js":
/*!********************************************************!*\
  !*** ./static/src/js/components/common/header-base.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GetHeaderBase; });
/* harmony import */ var static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/js/utils/style.js */ "./static/src/js/utils/style.js");
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");
/**
 * @file header event module.
 * @author ProFatXuanAll <ProFatXuanAll@gmail.com>
 * @version 1.0.0
 * @since 1.0.0
 */




class GetHeaderBase {
    /**
     * @param {object} opt
     * @param {HTMLElement} opt.headerDOM
     */

    constructor ( opt ) {
        opt = opt || {};

        if (
            !opt.headerDOM ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( opt.headerDOM ) ||
            opt.allHeaderDOMs.length === 0 ||
            !Array.from( opt.allHeaderDOMs ).every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement )
        )
            throw new TypeError( 'invalid arguments' );

        const headerElementQuerySelector = element => `.header > .header__${ element }`;
        const headerBlockQuerySelector = block => `${ headerElementQuerySelector( block ) }.${ block }`;
        const navigationElementQuerySelector = element => `${ headerBlockQuerySelector( 'navigation' ) } > .navigation__${ element }`;
        const navigationBlockQuerySelector = block => `${ navigationElementQuerySelector( block ) }.${ block }`;
        const languageElementQuerySelector = element => `${ navigationBlockQuerySelector( 'language' ) } > .language__${ element }`;
        const languageBlockQuerySelector = block => `${ languageElementQuerySelector( block ) }.${ block }`;
        const listItemModifiers = [
            'about',
            'research',
            'student',
            'announcement',
            'resource',
        ];
        const listQuerySelector = modifier => `${ navigationBlockQuerySelector( 'list' ) } > .list__item.item.list__item--${ modifier }`;
        const listItemElementQuerySelector = ( element, modifier ) => `${ listQuerySelector( modifier ) } > .item__${ element }`;
        const listItemBlockQuerySelector = ( block, modifier ) => `${ listItemElementQuerySelector( block, modifier ) }.${ block }`;

        this.DOM = {
            header:         opt.headerDOM,
            allNavigations: Array.from( opt.allHeaderDOMs )
            .map( header => header.querySelector( headerBlockQuerySelector( 'navigation' ) ) ),
            menu:           opt.headerDOM.querySelector( headerElementQuerySelector( 'menu' ) ),
            navigation:     opt.headerDOM.querySelector( headerBlockQuerySelector( 'navigation' ) ),
            cancel:         opt.headerDOM.querySelector( navigationElementQuerySelector( 'cancel' ) ),
            item:           listItemModifiers.map( modifier => ( {
                switch:    opt.headerDOM.querySelector( listItemElementQuerySelector( 'switch', modifier ) ),
                switches:  Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( listItemElementQuerySelector( 'switch', modifier ) ) )
                .filter( switchDOM => switchDOM !== null ),
                dropdowns: Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( listItemBlockQuerySelector( 'dropdown', modifier ) ) )
                .filter( dropdownDOM => dropdownDOM !== null ),
            } ) )
            .filter( itemObj => itemObj.switch !== null ),
            language: {
                switch:    opt.headerDOM.querySelector( languageElementQuerySelector( 'switch' ) ),
                switches:  Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( languageElementQuerySelector( 'switch' ) ) )
                .filter( switchDOM => switchDOM !== null ),
                dropdowns: Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( languageBlockQuerySelector( 'dropdown' ) ) )
                .filter( dropdownDOM => dropdownDOM !== null ),
            },
        };

        if (
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.menu ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.cancel ) ||
            !this.DOM.item.length ||
            !this.DOM.item.every( itemObj => models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( itemObj.switch ) &&
                itemObj.dropdowns.every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement ) &&
                itemObj.dropdowns.length !== 0 ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.language.switch ) ||
            !this.DOM.language.switches.length ||
            !this.DOM.language.switches.every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement ) ||
            !this.DOM.language.dropdowns.length ||
            !this.DOM.language.dropdowns.every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement )
        )
            throw new Error( 'DOM not found.' );

        this.subscribeMenuEvent();
        this.subscribeDropdownEvent();
        this.subscribeLanguageEvent();
        this.subscribeScrollEvent();

        return this;
    }

    subscribeMenuEvent () {
        window.addEventListener( 'click', ( event ) => {
            if ( event.target !== this.DOM.menu &&
                 !this.DOM.navigation.contains( event.target ) &&
                 window.getComputedStyle( this.DOM.header ).display !== 'none'
            ) {
                this.DOM.allNavigations.forEach( ( navigationDOM ) => {
                    Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( navigationDOM, 'header__navigation--active' );
                } );
            }
        } );

        this.DOM.menu.addEventListener( 'click', () => {
            this.DOM.allNavigations.forEach( ( navigationDOM ) => {
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( navigationDOM, 'header__navigation--active' );
            } );
        } );

        this.DOM.cancel.addEventListener( 'click', () => {
            this.DOM.allNavigations.forEach( ( navigationDOM ) => {
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( navigationDOM, 'header__navigation--active' );
            } );
        } );
    }

    subscribeDropdownEvent () {
        this.DOM.item.forEach( ( itemObj ) => {
            itemObj.switch.addEventListener( 'click', () => {
                if ( itemObj.switch.classList.contains( 'item__switch--active' ) ) {
                    itemObj.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( switchDOM, 'item__switch--active' ) );
                    itemObj.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( dropdownDOM, 'item__dropdown--open' ) );
                }
                else {
                    this.DOM.item.forEach( ( itemObj ) => {
                        itemObj.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( switchDOM, 'item__switch--active' ) );
                        itemObj.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( dropdownDOM, 'item__dropdown--open' ) );
                    } );
                    itemObj.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( switchDOM, 'item__switch--active' ) );
                    itemObj.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( dropdownDOM, 'item__dropdown--open' ) );
                }
            } );
        } );
    }

    subscribeLanguageEvent () {
        this.DOM.language.switch.addEventListener( 'click', () => {
            if ( this.DOM.language.switch.classList.contains( 'language__switch--active' ) ) {
                this.DOM.language.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( dropdownDOM, 'language__dropdown--open' ) );
                this.DOM.language.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( switchDOM, 'language__switch--active' ) );
            }
            else {
                this.DOM.language.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( dropdownDOM, 'language__dropdown--open' ) );
                this.DOM.language.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( switchDOM, 'language__switch--active' ) );
            }
        } );
    }

    subscribeScrollEvent () {
        let prevScrollpos = window.pageYOffset;
        window.addEventListener( 'scroll', () => {
            const currentScrollPos = window.pageYOffset;
            if ( prevScrollpos < currentScrollPos && currentScrollPos > 91 )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.header, 'header--active' );
            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.header, 'header--active' );

            if ( currentScrollPos > 91 )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.header, 'header--fixed' );
            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.header, 'header--fixed' );
            prevScrollpos = currentScrollPos;
        } );
    }
}


/***/ }),

/***/ "./static/src/js/components/common/header-large.js":
/*!*********************************************************!*\
  !*** ./static/src/js/components/common/header-large.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GetHeaderLarge; });
/* harmony import */ var static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/js/utils/style.js */ "./static/src/js/utils/style.js");
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");
/**
 * @file header event module.
 * @author ProFatXuanAll <ProFatXuanAll@gmail.com>
 * @version 1.0.0
 * @since 1.0.0
 */




class GetHeaderLarge {
    /**
     * @param {object} opt
     * @param {HTMLElement} opt.headerDOM
     */

    constructor ( opt ) {
        opt = opt || {};

        if (
            !opt.headerDOM ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( opt.headerDOM )
        )
            throw new TypeError( 'invalid arguments' );

        const headerElementQuerySelector = element => `.header > .header__${ element }`;
        const headerBlockQuerySelector = block => `${ headerElementQuerySelector( block ) }.${ block }`;
        const functionElementQuerySelector = element => `${ headerBlockQuerySelector( 'functions' ) } > .functions__${ element }`;
        const functionBlockQuerySelector = block => `${ functionElementQuerySelector( block ) }.${ block }`;
        const functionRightElementQuerySelector = element => `${ functionBlockQuerySelector( 'right' ) } > .right__${ element }`;
        const functionRightBlockQuerySelector = block => `${ functionRightElementQuerySelector( block ) }.${ block }`;
        const searchElementQuerySelector = element => `${ functionRightBlockQuerySelector( 'search' ) } > .search__${ element }`;
        const searchBlockQuerySelector = block => `${ searchElementQuerySelector( block ) }.${ block }`;
        const languageElementQuerySelector = element => `${ functionRightBlockQuerySelector( 'language' ) } > .language__${ element }`;
        const languageBlockQuerySelector = block => `${ languageElementQuerySelector( block ) }.${ block }`;
        const languageButtonElementQuerySelector = element => `${ languageBlockQuerySelector( 'button' ) } > .button__${ element }`;

        this.DOM = {
            header:         opt.headerDOM,
            language:       {
                button:   opt.headerDOM.querySelector( languageBlockQuerySelector( 'button' ) ),
                dropdown: opt.headerDOM.querySelector( languageButtonElementQuerySelector( 'dropdown' ) ),
                active:   false,
            },
            search: {
                button:   opt.headerDOM.querySelector( searchBlockQuerySelector( 'button' ) ),
                dropdown: opt.headerDOM.querySelector( searchBlockQuerySelector( 'dropdown' ) ),
                cancel:   opt.headerDOM.querySelector( `${ searchBlockQuerySelector( 'dropdown' ) } > .dropdown__cancel` ),
            },
        };

        if (
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.language.button ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.language.dropdown ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.search.button ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.search.dropdown ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.search.cancel )
        )
            throw new Error( 'DOM not found.' );

        this.subscribeLanguageEvent();
        this.subscribeSearchEvent();
        this.subscribeScrollEvent();

        return this;
    }

    subscribeLanguageEvent () {
        this.DOM.language.button.addEventListener( 'click', () => {
            if ( this.DOM.language.active )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.language.dropdown, 'button__dropdown--active' );

            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.language.dropdown, 'button__dropdown--active' );

            this.DOM.language.active = !this.DOM.language.active;
        } );
    }

    subscribeSearchEvent () {
        this.DOM.search.button.addEventListener( 'click', () => {
            Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.search.dropdown, 'search__dropdown--active' );
        } );
        this.DOM.search.cancel.addEventListener( 'click', () => {
            Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.search.dropdown, 'search__dropdown--active' );
        } );
    }

    subscribeScrollEvent () {
        let prevScrollpos = window.pageYOffset;
        window.addEventListener( 'scroll', () => {
            const currentScrollPos = window.pageYOffset;
            if ( prevScrollpos < currentScrollPos && currentScrollPos > 70 )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.header, 'header--active' );
            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.header, 'header--active' );

            if ( currentScrollPos > 70 )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.header, 'header--fixed' );
            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.header, 'header--fixed' );
            prevScrollpos = currentScrollPos;
        } );
    }
}



/***/ }),

/***/ "./static/src/js/components/common/header-medium.js":
/*!**********************************************************!*\
  !*** ./static/src/js/components/common/header-medium.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GetHeaderMedium; });
/* harmony import */ var static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/js/utils/style.js */ "./static/src/js/utils/style.js");
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");
/**
 * @file header event module.
 * @author ProFatXuanAll <ProFatXuanAll@gmail.com>
 * @version 1.0.0
 * @since 1.0.0
 */




class GetHeaderMedium {
    /**
     * @param {object} opt
     * @param {HTMLElement} opt.headerDOM
     */

    constructor ( opt ) {
        opt = opt || {};

        if (
            !opt.headerDOM ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( opt.headerDOM ) ||
            opt.allHeaderDOMs.length === 0 ||
            !Array.from( opt.allHeaderDOMs ).every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement )
        )
            throw new TypeError( 'invalid arguments' );

        const headerElementQuerySelector = element => `.header > .header__${ element }`;
        const headerBlockQuerySelector = block => `${ headerElementQuerySelector( block ) }.${ block }`;
        const navigationElementQuerySelector = element => `${ headerBlockQuerySelector( 'navigation' ) } > .navigation__${ element }`;
        const navigationBlockQuerySelector = block => `${ navigationElementQuerySelector( block ) }.${ block }`;
        const languageElementQuerySelector = element => `${ navigationBlockQuerySelector( 'language' ) } > .language__${ element }`;
        const languageBlockQuerySelector = block => `${ languageElementQuerySelector( block ) }.${ block }`;
        const listItemModifiers = [
            'about',
            'research',
            'student',
            'announcement',
            'resource',
        ];
        const listQuerySelector = modifier => `${ navigationBlockQuerySelector( 'list' ) } > .list__item.item.list__item--${ modifier }`;
        const listItemElementQuerySelector = ( element, modifier ) => `${ listQuerySelector( modifier ) } > .item__${ element }`;
        const listItemBlockQuerySelector = ( block, modifier ) => `${ listItemElementQuerySelector( block, modifier ) }.${ block }`;

        this.DOM = {
            header:         opt.headerDOM,
            allNavigations: Array.from( opt.allHeaderDOMs ).map( header => header.querySelector( headerBlockQuerySelector( 'navigation' ) ) ),
            menu:           opt.headerDOM.querySelector( headerElementQuerySelector( 'menu' ) ),
            navigation:     opt.headerDOM.querySelector( headerBlockQuerySelector( 'navigation' ) ),
            cancel:         opt.headerDOM.querySelector( navigationElementQuerySelector( 'cancel' ) ),
            item:           listItemModifiers.map( modifier => ( {
                switch:    opt.headerDOM.querySelector( listItemElementQuerySelector( 'switch', modifier ) ),
                switches:  Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( listItemElementQuerySelector( 'switch', modifier ) ) )
                .filter( switchDOM => switchDOM !== null ),
                dropdowns: Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( listItemBlockQuerySelector( 'dropdown', modifier ) ) )
                .filter( dropdownDOM => dropdownDOM !== null ),
            } ) )
            .filter( itemObj => itemObj.switch !== null ),
            language: {
                switch:    opt.headerDOM.querySelector( languageElementQuerySelector( 'switch' ) ),
                switches:  Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( languageElementQuerySelector( 'switch' ) ) )
                .filter( switchDOM => switchDOM !== null ),
                dropdowns: Array.from( opt.allHeaderDOMs )
                .map( header => header.querySelector( languageBlockQuerySelector( 'dropdown' ) ) )
                .filter( dropdownDOM => dropdownDOM !== null ),
            },
        };

        if (
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.menu ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.cancel ) ||
            !this.DOM.item.length ||
            !this.DOM.item.every( itemObj => models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( itemObj.switch ) &&
                itemObj.dropdowns.every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement ) &&
                itemObj.dropdowns.length !== 0 ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement( this.DOM.language.switch ) ||
            !this.DOM.language.switches.length ||
            !this.DOM.language.switches.every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement ) ||
            !this.DOM.language.dropdowns.length ||
            !this.DOM.language.dropdowns.every( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_1__["default"].isDomElement )
        )
            throw new Error( 'DOM not found.' );

        this.subscribeMenuEvent();
        this.subscribeDropdownEvent();
        this.subscribeLanguageEvent();
        this.subscribeScrollEvent();

        return this;
    }

    subscribeMenuEvent () {
        window.addEventListener( 'click', ( event ) => {
            if ( event.target !== this.DOM.menu &&
                !this.DOM.navigation.contains( event.target ) &&
                window.getComputedStyle( this.DOM.header ).display !== 'none'
            ) {
                this.DOM.allNavigations.forEach( ( navigationDOM ) => {
                    Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( navigationDOM, 'header__navigation--active' );
                } );
            }
        } );

        this.DOM.menu.addEventListener( 'click', () => {
            this.DOM.allNavigations.forEach( ( navigationDOM ) => {
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( navigationDOM, 'header__navigation--active' );
            } );
        } );

        this.DOM.cancel.addEventListener( 'click', () => {
            this.DOM.allNavigations.forEach( ( navigationDOM ) => {
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( navigationDOM, 'header__navigation--active' );
            } );
        } );
    }

    subscribeDropdownEvent () {
        this.DOM.item.forEach( ( itemObj ) => {
            itemObj.switch.addEventListener( 'click', () => {
                if ( itemObj.switch.classList.contains( 'item__switch--active' ) ) {
                    itemObj.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( switchDOM, 'item__switch--active' ) );
                    itemObj.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( dropdownDOM, 'item__dropdown--open' ) );
                }
                else {
                    this.DOM.item.forEach( ( itemObj ) => {
                        itemObj.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( switchDOM, 'item__switch--active' ) );
                        itemObj.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( dropdownDOM, 'item__dropdown--open' ) );
                    } );
                    itemObj.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( switchDOM, 'item__switch--active' ) );
                    itemObj.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( dropdownDOM, 'item__dropdown--open' ) );
                }
            } );
        } );
    }

    subscribeLanguageEvent () {
        this.DOM.language.switch.addEventListener( 'click', () => {
            if ( this.DOM.language.switch.classList.contains( 'language__switch--active' ) ) {
                this.DOM.language.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( dropdownDOM, 'language__dropdown--open' ) );
                this.DOM.language.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( switchDOM, 'language__switch--active' ) );
            }
            else {
                this.DOM.language.dropdowns.forEach( dropdownDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( dropdownDOM, 'language__dropdown--open' ) );
                this.DOM.language.switches.forEach( switchDOM => Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( switchDOM, 'language__switch--active' ) );
            }
        } );
    }

    subscribeScrollEvent () {
        let prevScrollpos = window.pageYOffset;
        window.addEventListener( 'scroll', () => {
            const currentScrollPos = window.pageYOffset;
            if ( prevScrollpos < currentScrollPos && currentScrollPos > 96 )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.header, 'header--active' );
            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.header, 'header--active' );

            if ( currentScrollPos > 96 )
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classAdd"])( this.DOM.header, 'header--fixed' );
            else
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_0__["classRemove"])( this.DOM.header, 'header--fixed' );
            prevScrollpos = currentScrollPos;
        } );
    }
}


/***/ }),

/***/ "./static/src/js/components/user/data-config.js":
/*!******************************************************!*\
  !*** ./static/src/js/components/user/data-config.js ***!
  \******************************************************/
/*! exports provided: dataI18n, dataEditPageConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataI18n", function() { return dataI18n; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataEditPageConfig", function() { return dataEditPageConfig; });
/* harmony import */ var models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! models/common/utils/language.js */ "./models/common/utils/language.js");
/* harmony import */ var models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! models/faculty/utils/degree.js */ "./models/faculty/utils/degree.js");
/* harmony import */ var static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/src/js/utils/language.js */ "./static/src/js/utils/language.js");
/* harmony import */ var static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! static/src/js/components/user/edit-page.js */ "./static/src/js/components/user/edit-page.js");
/* harmony import */ var models_faculty_utils_nation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! models/faculty/utils/nation.js */ "./models/faculty/utils/nation.js");






const dataI18n = Object.freeze( {
    profile: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            topic: {
                name:          'name',
                nation:        'naiton',
                officeAddress: 'office address',
                officeTel:     'office tel',
                labName:       'lab name',
                labAddress:    'lab address',
                labTel:        'lab tel',
                labWeb:        'lab web',
                email:         'email',
                personalWeb:   'personal web',
                fax:           'fax',
            },
            default: {
                name:          'ex. Sam Wang',
                officeAddress: 'ex. 65xxx, 12F, CSIE new building',
                officeTel:     'ex. 06-xxxxxxx,ext',
                labName:       'please input your lab name',
                labAddress:    'ex. 65xxx, 5F, CSIE new building',
                labTel:        'ex. 06-xxxxxxx,ext',
                labWeb:        'ex. http://your_web_site.com',
                email:         'ex. example@xxxxxxxx',
                personalWeb:   'ex. http://your_web_site.com',
                fax:           'please input your fax number',
                nation:        0,
            },
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            topic: {
                name:          '姓名',
                nation:        '國籍',
                officeAddress: '辦公室位置',
                officeTel:     '辦公室電話',
                labName:       '實驗室名稱',
                labAddress:    '實驗室位置',
                labTel:        '實驗室電話',
                labWeb:        '實驗室網站',
                email:         'email',
                personalWeb:   '個人網站',
                fax:           '傳真',
            },
            default: {
                name:          'ex. 王小明',
                officeAddress: 'ex. 資訊系新館 65xxx',
                officeTel:     'ex. 06-xxxxxxx,分機號碼',
                labName:       'ex. xxx實驗室',
                labAddress:    'ex. 資訊系新館 65xxx',
                labTel:        'ex. 06-xxxxxxx,分機號碼',
                labWeb:        'ex. http://your_web_site.com',
                email:         'ex. example@xxxxxxxx',
                personalWeb:   'ex. http://your_web_site.com',
                fax:           '請輸入您的傳真號碼',
            },
        },
    },
    title: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            topic:   'title',
            default: {
                title:        'ex. Professor',
            },
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            topic:   '職稱',
            default: {
                title:        'ex. 教授',
            },
        },
    },
    specialty: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            topic:   'specialty',
            default: {
                specialty:     'ex. machine learning',
            },
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            topic:   '專長領域',
            default: {
                specialty:     'ex. 機器學習',
            },
        },
    },
    education: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            topic:   'education',
            default: {
                degree: 0,
                school:       'ex. Nation Cheng Kung University',
                major:        'ex. CSIE',
            },
            localTopic: {
                degree: 'degree',
                school: 'school',
                major:  'major',
            },
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            topic:   '學歷',
            default: {
                degree: 0,
                school:       'ex. 國立成功大學',
                major:        'ex. 資訊工程學系',
            },
            localTopic: {
                degree: '學位',
                school: '學校',
                major:  '主修',
            },
        },
    },
    experience: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            topic:   'experience',
            default: {
                organization: 'ex. Nation Cheng Kung University',
                department:   'ex. CSIE',
                title:        'ex. Professor',
            },
            localTopic: {
                organization: 'organization',
                department:   'department',
                title:        'title',
            },
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            topic:   '經歷',
            default: {
                organization: 'ex. 國立成功大學',
                department:   'ex. 資訊工程學系',
                title:        'ex. 教授',
            },
            localTopic: {
                organization: '任職單位',
                department:   '任職部門',
                title:        '職位',
            },
        },
    },
    editPage: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            button: {
                cancel: 'cancel',
                check:  'check',
            },
            topic: {
                add:    'add your ',
                update: 'update your ',
                delete: 'delete your ',
            },
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            button: {
                cancel: '取消',
                check:  '確定',
            },
            topic: {
                add:    '新增您的',
                update: '修改您的',
                delete: '刪除您的',
            },
        },
    },
    button: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            delete: 'delete',
            update:  'update',
            add:     'add',
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            delete: '刪除',
            update:  '變更',
            add:     '新增',
        },
    },
    time: {
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'en-US' ) ]: {
            from:    'from',
            to:      'to',
        },
        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].getLanguageId( 'zh-TW' ) ]: {
            from:    '從',
            to:      '至',
        },
    },
} );

const dataEditPageConfig = Object.freeze( {
    profile: {
        name: [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'name',
                dataType:    'text',
                i18n:        true,
            } ),
        ],
        officeAddress: [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'officeAddress',
                dataType:    'text',
                i18n:        true,
            } ),
        ],
        labName: [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'labName',
                dataType:    'text',
                i18n:        true,
            } ),
        ],
        labAddress:  [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'labAddress',
                dataType:    'text',
                i18n:        true,
            } ),
        ],
        labTel:  [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'labTel',
                dataType:    'tel',
                i18n:        false,
            } ),
        ],
        labWeb:  [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'labWeb',
                dataType:    'url',
                i18n:        false,
            } ),
        ],
        officeTel: [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'officeTel',
                dataType:    'tel',
                i18n:        false,
            } ),
        ],
        email:    [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'email',
                dataType:    'email',
                i18n:        false,
            } ),
        ],
        fax:    [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'fax',
                dataType:    'tel',
                i18n:        false,
            } ),
        ],
        personalWeb:  [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:        'text',
                dbTableItem: 'personalWeb',
                dataType:    'url',
                i18n:        false,
            } ),
        ],
        nation: [
            Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])( {
                type:         'dropdown',
                dbTableItem:  'nation',
                dropdownItem: models_faculty_utils_nation_js__WEBPACK_IMPORTED_MODULE_4__["default"].i18n[ static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_2__["default"].currentLanguageId ],
                util:         models_faculty_utils_nation_js__WEBPACK_IMPORTED_MODULE_4__["default"],
            } ),
        ],
    },
    education: [
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type: 'time',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'localTopic',
                dbTableItem: 'school',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'school',
                dataType:    'text',
                i18n:        true,
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'localTopic',
                dbTableItem: 'major',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'major',
                dataType:    'text',
                i18n:        true,
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'localTopic',
                dbTableItem: 'degree',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:         'dropdown',
                dbTableItem:  'degree',
                dataType:     'text',
                dropdownItem: models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_1__["default"].i18n[ static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_2__["default"].currentLanguageId ],
                util:         models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            }
        ),
    ],
    experience: [
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type: 'time',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'localTopic',
                dbTableItem: 'organization',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'organization',
                dataType:    'text',
                i18n:        true,
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'localTopic',
                dbTableItem: 'department',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'department',
                dataType:    'text',
                i18n:        true,
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'localTopic',
                dbTableItem: 'title',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'title',
                dataType:    'text',
                i18n:        true,
            }
        ),
    ],
    title: [
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type: 'time',
            }
        ),
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'title',
                dataType:    'text',
                i18n:        true,
            }
        ),
    ],
    specialty: [
        Object(static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_3__["editPageType"])(
            {
                type:        'text',
                dbTableItem: 'specialty',
                dataType:    'text',
                i18n:        true,
            }
        ),
    ],
} );




/***/ }),

/***/ "./static/src/js/components/user/edit-page.js":
/*!****************************************************!*\
  !*** ./static/src/js/components/user/edit-page.js ***!
  \****************************************************/
/*! exports provided: default, EditPage, editPageType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditPage", function() { return EditPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editPageType", function() { return editPageType; });
/* harmony import */ var static_src_pug_components_user_edit_page_pug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/pug/components/user/edit-page.pug */ "./static/src/pug/components/user/edit-page.pug");
/* harmony import */ var static_src_pug_components_user_edit_page_pug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(static_src_pug_components_user_edit_page_pug__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/src/pug/components/user/edit-page-content.pug */ "./static/src/pug/components/user/edit-page-content.pug");
/* harmony import */ var static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/src/js/components/user/data-config.js */ "./static/src/js/components/user/data-config.js");
/* harmony import */ var models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! models/common/utils/language.js */ "./models/common/utils/language.js");
/* harmony import */ var static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! static/src/js/utils/style.js */ "./static/src/js/utils/style.js");
/* harmony import */ var settings_server_config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! settings/server/config.js */ "./settings/server/config.js");
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");
/* harmony import */ var static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! static/src/js/utils/language.js */ "./static/src/js/utils/language.js");









/**
 * @param {object} opt
 * @return {Promise}
 */


class EditPage {
    constructor ( opt ) {
        if (
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_6__["default"].isDomElement( opt.editPageDOM ) ||
            !static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_7__["default"].isSupportedLanguageId( opt.languageId )
        )
            throw new TypeError( 'invalid arguments' );

        this.DOM = {
            editPage: opt.editPageDOM,
        };
        this.config = {
            languageId:    opt.languageId,
            buttonMethod:  opt.buttonMethod,
            dbTable:       opt.dbTable,
            dbTableItemId: opt.id,
        };
        this.dataI18n = opt.dataI18n;
        this.editPageConfig = opt.editPageConfig;
        this.dbData = ( opt.buttonMethod === 'update' ) ? opt.dbData : {};
        this.content = opt.content;
    }

    async renderEditPageWindow () {
        const i18n = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_2__["dataI18n"].editPage;
        Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_4__["classRemove"])( this.DOM.editPage, 'content__edit-page--hidden' );
        this.DOM.editPage.innerHTML = '';
        this.DOM.editPage.innerHTML += static_src_pug_components_user_edit_page_pug__WEBPACK_IMPORTED_MODULE_0___default()( {
            url:    `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_5__["host"] }/user/profile`,
            cancel: i18n[ this.config.languageId ].button.cancel,
            check:  i18n[ this.config.languageId ].button.check,
            topic:  `${ i18n[ this.config.languageId ].topic[ this.config.buttonMethod ] }${ this.dataI18n[ this.config.languageId ].topic }`,
        } );
        return {
            info:   this.DOM.editPage.querySelector( '.edit-page__window > .window__form > .form__content > .content__info' ),
            check:   this.DOM.editPage.querySelector( '.edit-page__window > .window__form > .form__button > .button__item--check' ),
            cancel:  this.DOM.editPage.querySelector( '.edit-page__window > .window__form > .form__button > .button__item--cancel' ),
            error:   this.DOM.editPage.querySelector( '.edit-page__window > .window__form > .form__content > .content__error > .error__message' ),
        };
    }

    setTextInput ( editPageConfig, editPageInfoDOM ) {
        const flag = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].getLanguageId( 'zh-TW' ) ]: `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_5__["host"] }/static/image/icon/tw.png`,
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].getLanguageId( 'en-US' ) ]: `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_5__["host"] }/static/image/icon/us.png`,
        };
        const languageIds = ( editPageConfig.i18n ) ? models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].supportedLanguageId : [ this.config.languageId, ];
        languageIds.forEach( ( languageId ) => {
            const placeholder = this.dataI18n[ languageId ].default[ editPageConfig.dbTableItem ];

            editPageInfoDOM.innerHTML += static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1___default()( {
                flag:        ( editPageConfig.i18n ) ? flag[ languageId ] : null,
                value:       ( this.config.buttonMethod === 'update' ) ? this.dbData[ languageId ][ editPageConfig.dbTableItem ] : '',
                placeholder,
                name:        ( editPageConfig.i18n ) ? `${ editPageConfig.dbTableItem }_${ languageId }` : `${ editPageConfig.dbTableItem }`,
                dataType:    editPageConfig.dataType,
                type:        editPageConfig.type,
                dbTableItem: editPageConfig.dbTableItem,
                languageId,
                i18n:        editPageConfig.i18n,
            } );
        } );
    }

    setTimeInput ( editPageInfoDOM ) {
        const timeI18n = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_2__["dataI18n"].time[ this.config.languageId ];
        const valueFrom = ( this.config.buttonMethod === 'update' ) ? this.dbData[ this.config.languageId ].from : null;
        const valueTo = ( this.config.buttonMethod === 'update' ) ? this.dbData[ this.config.languageId ].to : null;

        editPageInfoDOM.innerHTML += static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1___default()( {
            from:       timeI18n.from,
            to:         timeI18n.to,
            valueFrom,
            valueTo,
            nameFrom:   'from',
            nameTo:     'to',
            type:       'time',
        } );
    }

    setLocalTopic ( topic, editPageInfoDOM ) {
        editPageInfoDOM.innerHTML += static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1___default()( {
            localTopic:   topic,
            type:        'local-topic',
        } );
    }

    setDropdownInput ( editPageConfig, editPageInfoDOM ) {
        const util = editPageConfig.util;

        let value = util.map.indexOf( util.defaultOption );
        if ( this.config.buttonMethod === 'update' )
            value = this.dbData[ this.config.languageId ][ editPageConfig.dbTableItem ];

        const top = util.i18n[ this.config.languageId ][ util.map[ value ] ];

        editPageInfoDOM.innerHTML += static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1___default()( {
            top,
            value,
            data:        editPageConfig.dropdownItem,
            name:        `${ this.config.dbTable }_${ editPageConfig.dbTableItem }`,
            dbTableItem: editPageConfig.dbTableItem,
            type:        'dropdown',
        } );

        const dropdownTop = editPageInfoDOM.querySelector( '.input__dropdown > .dropdown__top' );
        const dropdownItems = editPageInfoDOM.querySelectorAll( '.input__dropdown > .dropdown__button > .button__content > .content__item' );
        const dropdownSubmit = editPageInfoDOM.querySelector( '.input__dropdown > .dropdown__button > .button__submit' );
        dropdownTop.addEventListener( 'click', () => {
            Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_4__["classAdd"])( editPageInfoDOM.querySelector( '.input__dropdown > .dropdown__button' ), 'dropdown__button--active' );
        } );
        dropdownItems.forEach( ( item ) => {
            item.addEventListener( 'click', ( element ) => {
                const newValue = element.target.getAttribute( 'value' );
                dropdownTop.innerHTML = util.i18n[ this.config.languageId ][ newValue ];
                dropdownSubmit.value = util.map.indexOf( newValue );
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_4__["classRemove"])( editPageInfoDOM.querySelector( '.input__dropdown > .dropdown__button' ), 'dropdown__button--active' );
            } );
        } );
    }

    async setEditPageInputBlock ( editPageInfoDOM ) {
        editPageInfoDOM.innerHTML = '';
        this.editPageConfig.forEach( ( element ) => {
            switch ( element.type ) {
                case 'text':
                    this.setTextInput( element, editPageInfoDOM );
                    break;
                case 'time':
                    this.setTimeInput( editPageInfoDOM );
                    break;
                case 'local-topic':
                    const topic =  this.dataI18n[ this.config.languageId ].localTopic[ element.dbTableItem ];
                    this.setLocalTopic( topic, editPageInfoDOM );
                    break;
                case 'dropdown':
                    this.setDropdownInput( element, editPageInfoDOM );
                    break;
                default:
                    break;
            }
        } );
    }

    async setEditPageDeleteBlock ( editPageInfoDOM ) {
        editPageInfoDOM.innerHTML += static_src_pug_components_user_edit_page_content_pug__WEBPACK_IMPORTED_MODULE_1___default()( {
            localTopic:  this.content,
            type:       'local-topic',
        } );
    }

    setFocus () {
        const input = this.DOM.editPage.getElementsByTagName( 'input' );
        const val   = input[ 0 ].value;
        input[ 0 ].focus();
        input[ 0 ].value = '';
        input[ 0 ].value = val;
    }

    async renderEditPage () {
        const editPageContentDOM = await this.renderEditPageWindow();

        if ( this.config.buttonMethod === 'delete' )
            await this.setEditPageDeleteBlock( editPageContentDOM.info );

        else {
            await this.setEditPageInputBlock( editPageContentDOM.info );
            this.setFocus();
        }

        return editPageContentDOM;
    }
}

/**
 * Return a object about editPage info
 * @param {object} info
 * @return {object}
 */

function editPageType ( info ) {
    const typeObj = {
        text: {
            type:        'text',
            dataType:    info.dataType,
            dbTableItem: info.dbTableItem,
            i18n:        info.i18n,
        },
        time: {
            type: 'time',
        },
        localTopic: {
            type:        'local-topic',
            dbTableItem: info.dbTableItem,
        },
        dropdown: {
            type:         'dropdown',
            util:         info.util,
            dbTableItem:  info.dbTableItem,
            dropdownItem: info.dropdownItem,
        },
    };

    return typeObj[ info.type ];
}

/* harmony default export */ __webpack_exports__["default"] = (EditPage);





/***/ }),

/***/ "./static/src/js/components/user/set-data.js":
/*!***************************************************!*\
  !*** ./static/src/js/components/user/set-data.js ***!
  \***************************************************/
/*! exports provided: SetData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetData", function() { return SetData; });
/* harmony import */ var static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/js/components/user/edit-page.js */ "./static/src/js/components/user/edit-page.js");
/* harmony import */ var static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/src/js/utils/language.js */ "./static/src/js/utils/language.js");
/* harmony import */ var static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/src/js/utils/style.js */ "./static/src/js/utils/style.js");
/* harmony import */ var settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! settings/server/config.js */ "./settings/server/config.js");
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");
/* harmony import */ var static_src_pug_components_user_dynamic_input_block_pug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! static/src/pug/components/user/dynamic-input-block.pug */ "./static/src/pug/components/user/dynamic-input-block.pug");
/* harmony import */ var static_src_pug_components_user_dynamic_input_block_pug__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(static_src_pug_components_user_dynamic_input_block_pug__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! models/common/utils/language.js */ "./models/common/utils/language.js");
/* harmony import */ var models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! models/faculty/utils/degree.js */ "./models/faculty/utils/degree.js");
/* harmony import */ var static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! static/src/js/components/user/data-config.js */ "./static/src/js/components/user/data-config.js");
/* harmony import */ var validate_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! validate.js */ "./node_modules/validate.js/validate.js");
/* harmony import */ var validate_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(validate_js__WEBPACK_IMPORTED_MODULE_9__);











class SetData {
    constructor ( opt ) {
        opt = opt || {};

        if (
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isDomElement( opt.blockDOM ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isDomElement( opt.editPageDOM ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isDomElement( opt.addButtonDOM ) ||
            !static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_1__["default"].isSupportedLanguageId( opt.languageId )
        )
            throw new TypeError( 'invalid arguments' );

        this.config = {
            languageId: opt.languageId,
            profileId:  opt.profileId,
            dbTable:    opt.dbTable,
        };

        this.i18n = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataI18n"][ opt.dbTable ];

        this.DOM = {
            block:     opt.blockDOM,
            editPage:  opt.editPageDOM,
            addButton: opt.addButtonDOM,
        };

        this.updateButtonQuerySelector = ( block, id ) => `.input-block__block > .block__content > .content__modify--${ block }-${ id }`;
        this.deleteButtonQuerySelector = ( block, id ) => `.input-block__block > .block__content > .content__remove--${ block }-${ id }`;

        this.editPageConfig = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataEditPageConfig"][ opt.dbTable ];
    }

    queryApi ( lang ) {
        return `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/api/faculty/facultyWithId/${ this.config.profileId }?languageId=${ lang }`;
    }

    async fetchData ( lang ) {
        try {
            const res = await fetch( this.queryApi( lang ) );

            if ( !res.ok )
                throw new Error( 'No faculty found' );

            return res.json();
        }
        catch ( err ) {
            throw err;
        }
    }

    async renderBlock ( info ) {
        try {
            const buttonI18n = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataI18n"].button;
            const data = {
                info,
                button:   {
                    remove: buttonI18n[ this.config.languageId ].delete,
                    modify: buttonI18n[ this.config.languageId ].update,
                },
            };
            this.DOM.block.innerHTML += static_src_pug_components_user_dynamic_input_block_pug__WEBPACK_IMPORTED_MODULE_5___default()( {
                data,
            } );
        }
        catch ( err ) {
            console.error( err );
        }
    }

    async renderEducationBlock ( data ) {
        try {
            this.DOM.block.innerHTML = '';
            data[ this.config.languageId ][ this.config.dbTable ].forEach( async ( res, index ) => {
                await this.renderBlock( {
                    modifier: 'education',
                    id:       res.educationId,
                    content:  `${ res.school } ${ res.major } ${ models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_7__["default"].i18n[ this.config.languageId ][ models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_7__["default"].map[ res.degree ] ] }`,
                    res:      {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ].education[ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ].education[ index ],
                    },
                } );
                await this.setUpdateButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.updateButtonQuerySelector( this.config.dbTable, res.educationId ) ),
                    res:       {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                    id:       res.educationId,
                } );
                await this.setDeleteButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.deleteButtonQuerySelector( this.config.dbTable, res.educationId ) ),
                    id:        res.educationId,
                    content:   `${ res.school } ${ res.major } ${ models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_7__["default"].i18n[ this.config.languageId ][ models_faculty_utils_degree_js__WEBPACK_IMPORTED_MODULE_7__["default"].map[ res.degree ] ] }`,
                } );
            } );
        }
        catch ( err ) {
            throw err;
        }
    }

    async renderExperienceBlock ( data ) {
        try {
            this.DOM.block.innerHTML = '';
            data[ this.config.languageId ][ this.config.dbTable ].forEach( async ( res, index ) => {
                await this.renderBlock( {
                    modifier: 'experience',
                    id:       res.experienceId,
                    content:  `${ res.organization } ${ res.department } ${ res.title }`,
                    res:      {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                } );
                await this.setUpdateButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.updateButtonQuerySelector( this.config.dbTable, res.experienceId ) ),
                    res:       {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                    id:       res.experienceId,
                } );
                await this.setDeleteButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.deleteButtonQuerySelector( this.config.dbTable, res.experienceId ) ),
                    id:        res.experienceId,
                    content:   `${ res.organization } ${ res.department } ${ res.title }`,
                } );
            } );
        }
        catch ( err ) {
            throw err;
        }
    }

    async renderTitleBlock ( data ) {
        try {
            this.DOM.block.innerHTML = '';
            data[ this.config.languageId ][ this.config.dbTable ].forEach( async ( res, index ) => {
                await this.renderBlock( {
                    modifier: 'title',
                    id:       res.titleId,
                    content:  res.title,
                    res:      {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                } );
                await this.setUpdateButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.updateButtonQuerySelector( this.config.dbTable, res.titleId ) ),
                    res:       {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                    id:       res.titleId,
                } );
                await this.setDeleteButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.deleteButtonQuerySelector( this.config.dbTable, res.titleId ) ),
                    id:        res.titleId,
                    content:   res.title,
                } );
            } );
        }
        catch ( err ) {
            throw err;
        }
    }

    async renderSpecialtyBlock ( data ) {
        try {
            this.DOM.block.innerHTML = '';
            data[ this.config.languageId ][ this.config.dbTable ].forEach( async ( res, index ) => {
                await this.renderBlock( {
                    modifier: 'specialty',
                    id:       res.specialtyId,
                    content:  res.specialty,
                    res:      {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                } );
                await this.setUpdateButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.updateButtonQuerySelector( this.config.dbTable, res.specialtyId ) ),
                    res:       {
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ][ this.config.dbTable ][ index ],
                        [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: data[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ][ this.config.dbTable ][ index ],
                    },
                    id:       res.specialtyId,
                } );
                await this.setDeleteButtonEvent( {
                    buttonDOM: this.DOM.block.querySelector( this.deleteButtonQuerySelector( this.config.dbTable, res.specialtyId ) ),
                    id:        res.specialtyId,
                    content:   res.specialty,
                } );
            } );
        }
        catch ( err ) {
            throw err;
        }
    }

    closeEditPageWindow () {
        Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__["classAdd"])( this.DOM.editPage, 'content__edit-page--hidden' );
    }

    uploadUpdateData ( dbTableItemId ) {
        this.checkSubmitData();
        const input = this.DOM.editPage.getElementsByTagName( 'input' );
        const item = {};
        const i18n = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: {},
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: {},
        };
        Array.from( input ).forEach( ( element ) => {
            if ( element.getAttribute( 'type' ) === 'text' && element.getAttribute( 'i18n' ) !== null )
                i18n[ element.getAttribute( 'languageId' ) ][ element.getAttribute( 'dbTableItem' ) ] = element.value;
            else
                item[ element.getAttribute( 'dbTableItem' ) ] = element.value;
        } );

        fetch( `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/user/profile`, {
            method:   'POST',
            body:   JSON.stringify( {
                'profileId':    this.config.profileId,
                'method':       'update',
                'dbTable':      this.config.dbTable,
                dbTableItemId,
                item,
                i18n,
            } ),
        } )
        .then( async () => {
            this.exec();
            this.closeEditPageWindow();
        } ).catch( ( err ) => {
            this.closeEditPageWindow();
            console.error( err );
        } );
    }

    uploadAddData () {
        const input = this.DOM.editPage.getElementsByTagName( 'input' );
        const item = {};
        const i18n = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: {},
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: {},
        };
        Array.from( input ).forEach( ( element ) => {
            if ( element.getAttribute( 'type' ) === 'text' && element.getAttribute( 'i18n' ) !== null )
                i18n[ element.getAttribute( 'languageId' ) ][ element.getAttribute( 'dbTableItem' ) ] = element.value;
            else
                item[ element.getAttribute( 'dbTableItem' ) ] = element.value;
        } );

        fetch( `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/user/profile`, {
            method:   'POST',
            body:   JSON.stringify( {
                profileId:    this.config.profileId,
                method:       'add',
                dbTable:      this.config.dbTable,
                item,
                i18n,
            } ),
        } )
        .then( async () => {
            this.exec();
            this.closeEditPageWindow();
        } ).catch( ( err ) => {
            this.closeEditPageWindow();
            console.error( err );
        } );
    }

    uploadDeleteData ( dbTableItemId ) {
        fetch( `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/user/profile`, {
            method:   'POST',
            body:   JSON.stringify( {
                profileId:     this.config.profileId,
                method:        'delete',
                dbTable:       this.config.dbTable,
                dbTableItemId,
            } ),
        } )
        .then( async () => {
            this.exec();
            this.closeEditPageWindow();
        } ).catch( ( err ) => {
            this.closeEditPageWindow();
            console.error( err );
        } );
    }

    checkSubmitData ( errorDOM ) {
        let isValid = true;
        const input = this.DOM.editPage.getElementsByTagName( 'input' );
        const today = new Date();

        const constraints = {
            [ `title_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文職稱是必填欄位',
                },
            },
            [ `title_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '英文職稱是必填欄位',
                },
            },
            [ `specialty_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文專長領域是必填欄位',
                },
            },
            [ `specialty_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '英文專長領域是必填欄位',
                },
            },
            [ `school_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文學校是必填欄位',
                },
            },
            [ `school_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '英文學校是必填欄位',
                },
            },
            [ `major_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文主修是必填欄位',
                },
            },
            [ `major_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '英文主修是必填欄位',
                },
            },
            [ `organization_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文任職單位是必填欄位',
                },
            },
            [ `organization_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '英文任職單位是必填欄位',
                },
            },
            from: {
                presence: {
                    allowEmpty: false,
                    message:    '年份是必填欄位',
                },
                numericality: {
                    onlyInteger:       true,
                    greaterThan:       1900,
                    lessThanOrEqualTo: today.getFullYear(),
                    message:           '年份應介於1900~現在',
                },
            },
            to: {
                presence: {
                    allowEmpty: false,
                    message:    '年份是必填欄位',
                },
                numericality: {
                    onlyInteger:       true,
                    greaterThan:       1900,
                    lessThanOrEqualTo: today.getFullYear(),
                    message:           '年份應介於1900~現在',
                },
            },
        };

        Array.from( input ).forEach( ( element ) => {
            if ( isValid ) {
                const errors = validate_js__WEBPACK_IMPORTED_MODULE_9___default.a.single( element.value, constraints[ element.name ] );
                if ( errors ) {
                    this.setErrorMessage( element, errors[ 0 ], errorDOM );
                    isValid = false;
                }
            }
        } );

        return isValid;
    }

    setErrorMessage ( inputDOM, errorMessage, errorDOM ) {
        inputDOM.focus();
        errorDOM.innerHTML = errorMessage;
    }

    setAddButtonEvent () {
        this.DOM.addButton.addEventListener( 'click', async () => {
            const editPage = new static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
                editPageConfig: static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataEditPageConfig"][ this.config.dbTable ],
                dataI18n:       static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataI18n"][ this.config.dbTable ],
                editPageDOM:    this.DOM.editPage,
                dbTable:        this.config.dbTable,
                languageId:     this.config.languageId,
                buttonMethod:   'add',
            } );
            const editPageDOM = await editPage.renderEditPage();

            editPageDOM.cancel.addEventListener( 'click', ( e ) => {
                e.preventDefault();
                this.closeEditPageWindow();
            } );
            editPageDOM.check.addEventListener( 'click', ( e ) => {
                e.preventDefault();
                const isValid = this.checkSubmitData( editPageDOM.error );
                if ( isValid )
                    this.uploadAddData();
            } );
        } );
    }

    setUpdateButtonEvent ( info ) {
        info.buttonDOM.addEventListener( 'click', async () => {
            const editPage = new static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
                editPageConfig: static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataEditPageConfig"][ this.config.dbTable ],
                dataI18n:       static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataI18n"][ this.config.dbTable ],
                editPageDOM:    this.DOM.editPage,
                dbTable:        this.config.dbTable,
                languageId:     this.config.languageId,
                dbData:         info.res,
                buttonMethod:   'update',
            } );
            const editPageDOM = await editPage.renderEditPage();

            editPageDOM.cancel.addEventListener( 'click', ( e ) => {
                e.preventDefault();
                this.closeEditPageWindow();
            } );
            editPageDOM.check.addEventListener( 'click', ( e ) => {
                e.preventDefault();

                const isValid = this.checkSubmitData( editPageDOM.error );
                if ( isValid )
                    this.uploadUpdateData( info.id );
            } );
        } );
    }

    setDeleteButtonEvent ( info ) {
        info.buttonDOM.addEventListener( 'click', async () => {
            const editPage = new static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
                dataI18n:       static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataI18n"][ this.config.dbTable ],
                editPageConfig: static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_8__["dataEditPageConfig"][ this.config.dbTable ],
                editPageDOM:    this.DOM.editPage,
                dbTable:        this.config.dbTable,
                languageId:     this.config.languageId,
                id:             info.id,
                content:        info.content,
                buttonMethod:   'delete',
            } );
            const editPageDOM = await editPage.renderEditPage();

            editPageDOM.cancel.addEventListener( 'click', ( e ) => {
                e.preventDefault();
                this.closeEditPageWindow();
            } );
            editPageDOM.check.addEventListener( 'click', ( e ) => {
                e.preventDefault();
                this.uploadDeleteData( info.id );
            } );
        } );
    }

    async exec () {
        const data = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ]: await this.fetchData( models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'en-US' ) ),
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ]: await this.fetchData( models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_6__["default"].getLanguageId( 'zh-TW' ) ),
        };

        switch ( this.config.dbTable ) {
            case 'education':
                await this.renderEducationBlock( data );
                break;
            case 'experience':
                await this.renderExperienceBlock( data );
                break;
            case 'title':
                await this.renderTitleBlock( data );
                break;
            case 'specialty':
                await this.renderSpecialtyBlock( data );
                break;
            default:
                break;
        }
        this.setAddButtonEvent();
    }
}




/***/ }),

/***/ "./static/src/js/components/user/set-profile-data.js":
/*!***********************************************************!*\
  !*** ./static/src/js/components/user/set-profile-data.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SetProfileData; });
/* harmony import */ var static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/js/components/user/edit-page.js */ "./static/src/js/components/user/edit-page.js");
/* harmony import */ var static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/src/js/utils/language.js */ "./static/src/js/utils/language.js");
/* harmony import */ var static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/src/js/utils/style.js */ "./static/src/js/utils/style.js");
/* harmony import */ var settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! settings/server/config.js */ "./settings/server/config.js");
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");
/* harmony import */ var models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! models/common/utils/language.js */ "./models/common/utils/language.js");
/* harmony import */ var models_faculty_utils_nation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! models/faculty/utils/nation.js */ "./models/faculty/utils/nation.js");
/* harmony import */ var static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! static/src/js/components/user/data-config.js */ "./static/src/js/components/user/data-config.js");
/* harmony import */ var validate_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! validate.js */ "./node_modules/validate.js/validate.js");
/* harmony import */ var validate_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(validate_js__WEBPACK_IMPORTED_MODULE_8__);










class SetProfileData {
    constructor ( opt ) {
        opt = opt || {};

        if (
            !opt.profileDOM ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isDomElement( opt.profileDOM ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isDomElement( opt.editPageDOM ) ||
            !static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_1__["default"].isSupportedLanguageId( opt.languageId ) ||
            !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isValidId( opt.profileId )
        )
            throw new TypeError( 'invalid arguments' );

        this.DOM = {
            profile:  opt.profileDOM,
            editPage: opt.editPageDOM,
        };

        this.config = {
            dbTable:    'profile',
            languageId: opt.languageId,
            profileId:  opt.profileId,
        };

        this.selector = {
            node:   block => `.profile__${ block }`,
            text:   block => `.profile__input-block--${ block } > .input-block__block > .block__content > .content__word`,
            update: block => `.profile__input-block--${ block } > .input-block__block > .block__content > .content__modify`,
        };

        this.editPageConfig = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_7__["dataEditPageConfig"].profile;

        this.classModifier = Object.freeze( {
            name:          'name',
            officeAddress:  'office-location',
            labName:       'lab-name',
            labAddress:    'lab-location',
            labTel:        'lab-tel',
            labWeb:        'lab-web',
            officeTel:     'office-tel',
            email:         'email',
            fax:           'fax',
            personalWeb:   'personal-web',
            nation:        'nation',
        } );

        this.i18n = static_src_js_components_user_data_config_js__WEBPACK_IMPORTED_MODULE_7__["dataI18n"].profile;

        this.imageDOM = {
            block:   opt.profileDOM.querySelector( '.profile__image' ),
            button:  opt.profileDOM.querySelector( '.profile__image > .image__frame > .frame__upload' ),
            preview: opt.profileDOM.querySelector( '.profile__image > .image__frame' ),
        };

        this.department = Array
        .from( opt.profileDOM.querySelectorAll( '.input-block > .input-block__block > .block__content > .content__tag--department' ) )
        .map( node => ( {
            node,
            classModifier: 'department',
            selected:      false,
            id:            node.getAttribute( 'data-department-id' ),
        } ) );

        this.researchGroup = Array
        .from( opt.profileDOM.querySelectorAll( '.input-block > .input-block__block > .block__content > .content__tag--research' ) )
        .map( node => ( {
            node,
            classModifier: 'research',
            selected:      false,
            id:            node.getAttribute( 'data-research-id' ),
        } ) );
    }

    queryApi ( languageId ) {
        return `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/api/faculty/facultyWithId/${ this.config.profileId }?languageId=${ languageId }`;
    }

    async fetchData ( languageId ) {
        try {
            const res = await fetch( this.queryApi( languageId ) );

            if ( !res.ok )
                throw new Error( 'No faculty found' );

            return res.json();
        }
        catch ( err ) {
            throw err;
        }
    }

    async setData () {
        const res = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ]: await this.fetchData( models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ),
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ]: await this.fetchData( models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ),
        };

        console.log( res );

        Object.keys( this.classModifier ).forEach( ( key ) => {
            this.setProfileBlock( key, res );
        } );

        this.setTags( res[ this.config.languageId ] );
        this.setImage( res[ this.config.languageId ].profile );
    }

    closeEditPageWindow () {
        Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__["classAdd"])( this.DOM.editPage, 'content__edit-page--hidden' );
    }

    setProfileBlock ( dbTableItem, res ) {
        const textDOM         = this.DOM.profile.querySelector( this.selector.text( this.classModifier[ dbTableItem ] ) );
        const updateButtonDOM = this.DOM.profile.querySelector( this.selector.update( this.classModifier[ dbTableItem ] ) );

        textDOM.innerHTML = res[ this.config.languageId ].profile[ dbTableItem ];
        if ( dbTableItem === 'nation' )
            textDOM.innerHTML = models_faculty_utils_nation_js__WEBPACK_IMPORTED_MODULE_6__["default"].i18n[ this.config.languageId ][ models_faculty_utils_nation_js__WEBPACK_IMPORTED_MODULE_6__["default"].map[ res[ this.config.languageId ].profile.nation ] ];


        updateButtonDOM.addEventListener( 'click', async () => {
            await this.setUpdateButtonEvent( dbTableItem, res );
        } );
    }

    async setUpdateButtonEvent ( dbTableItem, res ) {
        const tempDataI18n = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ]: {
                default: {
                    [ dbTableItem ]: this.i18n[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ].default[ dbTableItem ],
                },
                topic:   this.i18n[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ].topic[ dbTableItem ],
            },
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ]:  {
                default: {
                    [ dbTableItem ]: this.i18n[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ].default[ dbTableItem ],
                },
                topic:   this.i18n[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ].topic[ dbTableItem ],
            },
        };
        const editPage = new static_src_js_components_user_edit_page_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
            editPageDOM:    this.DOM.editPage,
            dbTable:        'profile',
            editPageConfig: this.editPageConfig[ dbTableItem ],
            languageId:     this.config.languageId,
            dataI18n:       tempDataI18n,
            dbData:           {
                [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ]: res[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ].profile,
                [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ]: res[ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ].profile,
            },
            buttonMethod: 'update',
        } );
        const editPageDOM = await editPage.renderEditPage();

        editPageDOM.cancel.addEventListener( 'click', ( e ) => {
            e.preventDefault();
            this.closeEditPageWindow();
        } );
        editPageDOM.check.addEventListener( 'click', ( e ) => {
            e.preventDefault();
            const isValid = this.checkSubmitData( editPageDOM.error );
            if ( isValid )
                this.uploadProfileData( dbTableItem );
        } );
    }

    checkSubmitData ( errorDOM ) {
        let isValid = true;
        const input = this.DOM.editPage.getElementsByTagName( 'input' );

        const constraints = {
            [ `name_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文姓名是必填欄位',
                },
            },
            [ `name_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '英文姓名是必填欄位',
                },
            },
            email: {
                presence: {
                    allowEmpty: false,
                    message:    'email是必填欄位',
                },
                email: {
                    message: 'email格式錯誤',
                },
            },
            fax: {
                format: {
                    pattern: '[0-9-()]+',
                    message: '傳真格式錯誤',
                },
            },
            personalWeb: {
                presence: {
                    allowEmpty: true,
                },
                url: {
                    message:    '網址格式錯誤',
                },
            },
            [ `officeAddress_${ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) }` ]: {
                presence: {
                    allowEmpty: false,
                    message:    '中文辦公室位置是必填欄位',
                },
            },
            officeTel: {
                format: {
                    pattern: '[0-9-(),]+',
                    message: '電話格式錯誤',
                },
            },
            labTel: {
                format: {
                    pattern: '[0-9-(),]+',
                    message: '電話格式錯誤',
                },
            },
            labWeb: {
                url: {
                    message: '網址格式錯誤',
                },
            },
        };

        Array.from( input ).forEach( ( element ) => {
            const errors = validate_js__WEBPACK_IMPORTED_MODULE_8___default.a.single( element.value, constraints[ element.name ] );
            if ( errors ) {
                this.setErrorMessage( element, errors[ 0 ], errorDOM );
                isValid = false;
            }
        } );

        return isValid;
    }

    setErrorMessage ( inputDOM, errorMessage, errorDOM ) {
        inputDOM.focus();
        errorDOM.innerHTML = errorMessage;
    }

    async uploadProfileData ( dbTableItem ) {
        const input = this.DOM.editPage.getElementsByTagName( 'input' );
        const item = {};
        const i18n = {
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ]: {},
            [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ]: {},
        };
        Array.from( input ).forEach( ( element ) => {
            if ( element.getAttribute( 'type' ) === 'text' && element.getAttribute( 'i18n' ) !== null )
                i18n[ element.getAttribute( 'languageId' ) ][ element.getAttribute( 'dbTableItem' ) ] = element.value;
            else
                item[ element.getAttribute( 'dbTableItem' ) ] = element.value;
        } );

        fetch( `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/user/profile`, {
            method:   'POST',
            body:   JSON.stringify( {
                'profileId':    this.config.profileId,
                'method':       'update',
                'dbTable':      'profile',
                item,
                i18n,
            } ),
        } )
        .then( async () => {
            const data = {
                [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ]: await this.fetchData( models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'en-US' ) ),
                [ models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ]: await this.fetchData( models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLanguageId( 'zh-TW' ) ),
            };
            this.setProfileBlock( dbTableItem, data );
            this.closeEditPageWindow();
        } ).catch( ( err ) => {
            this.closeEditPageWindow();
            console.error( err );
        } );
    }

    setImage ( res ) {
        try {
            if ( models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_4__["default"].isValidString( res.photo ) ) {
                const photoUrl = `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/static/image/faculty/${ res.photo }`;
                this.imageDOM.preview.style.backgroundImage = `url('${ photoUrl }')`;
                this.imageDOM.button.name = `modify_profile_photo_0_${ this.config.profileId }`;
                this.imageDOM.button.setAttribute( 'method', 'update' );
                this.imageDOM.button.setAttribute( 'dbTable', 'profile' );
                this.imageDOM.button.setAttribute( 'dbTableItem', 'photo' );
                this.imageDOM.button.setAttribute( 'languageId', this.config.languageId );
                this.imageDOM.block.action = `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/user/profile`;
            }

            this.imageDOM.button.addEventListener( 'change', () => {
                const input = this.imageDOM.button;
                if ( input.files && input.files[ 0 ] ) {
                    const reader = new FileReader();

                    reader.onload = ( e ) => {
                        this.imageDOM.preview.style.backgroundImage = `url('${ e.target.result }')`;
                    };
                    reader.readAsDataURL( input.files[ 0 ] );
                }
            } );
        }
        catch ( err ) {
            console.error( err );
        }
    }

    setTags ( res ) {
        [ 'department',
            'researchGroup', ].forEach( ( dbTable ) => {
            res[ dbTable ].forEach( ( element ) => {
                Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__["classAdd"])( this[ dbTable ][ element.type ].node, `content__tag--${ this[ dbTable ][ element.type ].classModifier }--active` );
                this[ dbTable ][ element.type ].selected = true;
            } );
            this[ dbTable ].forEach( ( element ) => {
                element.node.addEventListener( 'click', () => {
                    const method = ( element.selected ) ? 'delete' : 'add';
                    fetch( `${ settings_server_config_js__WEBPACK_IMPORTED_MODULE_3__["host"] }/user/profile`, {
                        method:   'POST',
                        body:   JSON.stringify( {
                            profileId:     this.config.profileId,
                            method,
                            dbTable,
                            dbTableItemId: element.id,
                        } ),
                    } )
                    .then( () => {
                        if ( element.selected ) {
                            Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__["classRemove"])( element.node, `content__tag--${ this[ dbTable ][ element.id ].classModifier }--active` );
                            element.selected = false;
                        }
                        else {
                            Object(static_src_js_utils_style_js__WEBPACK_IMPORTED_MODULE_2__["classAdd"])( element.node, `content__tag--${ this[ dbTable ][ element.id ].classModifier }--active` );
                            element.selected = true;
                        }
                    } )
                    .catch( ( err ) => {
                        console.error( err );
                    } );
                } );
            } );
        } );
    }

    async exec () {
        await this.setData();
    }
}


/***/ }),

/***/ "./static/src/js/user/profile.js":
/*!***************************************!*\
  !*** ./static/src/js/user/profile.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var static_src_js_components_common_header_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static/src/js/components/common/header-base.js */ "./static/src/js/components/common/header-base.js");
/* harmony import */ var static_src_js_components_common_header_medium_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/src/js/components/common/header-medium.js */ "./static/src/js/components/common/header-medium.js");
/* harmony import */ var static_src_js_components_common_header_large_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/src/js/components/common/header-large.js */ "./static/src/js/components/common/header-large.js");
/* harmony import */ var static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! static/src/js/utils/language.js */ "./static/src/js/utils/language.js");
/* harmony import */ var static_src_js_components_user_set_profile_data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! static/src/js/components/user/set-profile-data.js */ "./static/src/js/components/user/set-profile-data.js");
/* harmony import */ var static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! static/src/js/components/user/set-data.js */ "./static/src/js/components/user/set-data.js");







try {
    const headerBase = new static_src_js_components_common_header_base_js__WEBPACK_IMPORTED_MODULE_0__["default"]( {
        headerDOM:     document.querySelector( '.body__header.header.header--base' ),
        allHeaderDOMs: document.querySelectorAll( '.body__header.header' ),
    } );
    if ( !( headerBase instanceof static_src_js_components_common_header_base_js__WEBPACK_IMPORTED_MODULE_0__["default"] ) )
        throw new Error( '.header.header--base not found.' );
}
catch ( err ) {
    console.error( err );
}

try {
    const headerMedium = new static_src_js_components_common_header_medium_js__WEBPACK_IMPORTED_MODULE_1__["default"]( {
        headerDOM:     document.querySelector( '.body__header.header.header--medium' ),
        allHeaderDOMs: document.querySelectorAll( '.body__header.header' ),
    } );
    if ( !( headerMedium instanceof static_src_js_components_common_header_medium_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) )
        throw new Error( '.header.header--medium not found.' );
}
catch ( err ) {
    console.error( err );
}

try {
    const headerLarge = new static_src_js_components_common_header_large_js__WEBPACK_IMPORTED_MODULE_2__["default"]( {
        headerDOM:     document.querySelector( '.body__header.header.header--large' ),
    } );
    if ( !( headerLarge instanceof static_src_js_components_common_header_large_js__WEBPACK_IMPORTED_MODULE_2__["default"] ) )
        throw new Error( '.header.header--medium not found.' );
}
catch ( err ) {
    console.error( err );
}

try {
    const setProfileData = new static_src_js_components_user_set_profile_data_js__WEBPACK_IMPORTED_MODULE_4__["default"]( {
        profileDOM:       document.getElementById( 'profile' ),
        editPageDOM:      document.getElementById( 'edit-page' ),
        languageId:       static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].currentLanguageId,
        profileId:        24,
    } );

    setProfileData.exec();
}
catch ( err ) {
    console.error( err );
}

try {
    const setEducationData = new static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"]( {
        blockDOM:       document.getElementById( 'education' ),
        editPageDOM:      document.getElementById( 'edit-page' ),
        addButtonDOM:     document.getElementById( 'add__button--education-block' ),
        languageId:       static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].currentLanguageId,
        dbTable:          'education',
        profileId:        24,
    } );

    setEducationData.exec();
}
catch ( err ) {
    console.error( err );
}

try {
    const setExperienceData = new static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"]( {
        blockDOM:       document.getElementById( 'experience' ),
        editPageDOM:      document.getElementById( 'edit-page' ),
        addButtonDOM:     document.getElementById( 'add__button--experience-block' ),
        languageId:       static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].currentLanguageId,
        dbTable:          'experience',
        profileId:        24,
    } );
    if ( !( setExperienceData instanceof static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"] ) )
        throw new Error( 'setExperienceData inVaild' );

    setExperienceData.exec();
}
catch ( err ) {
    console.error( err );
}

try {
    const setTitleData = new static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"]( {
        blockDOM:         document.getElementById( 'title' ),
        editPageDOM:      document.getElementById( 'edit-page' ),
        addButtonDOM:     document.getElementById( 'add__button--title' ),
        languageId:       static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].currentLanguageId,
        dbTable:          'title',
        profileId:        24,
    } );
    if ( !( setTitleData instanceof static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"] ) )
        throw new Error( 'setTitleData inVaild' );

    setTitleData.exec();
}
catch ( err ) {
    console.error( err );
}

try {
    const setSpecialtyData = new static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"]( {
        blockDOM:         document.getElementById( 'specialty' ),
        editPageDOM:      document.getElementById( 'edit-page' ),
        addButtonDOM:     document.getElementById( 'add__button--specialty' ),
        languageId:       static_src_js_utils_language_js__WEBPACK_IMPORTED_MODULE_3__["default"].currentLanguageId,
        dbTable:          'specialty',
        profileId:        24,
    } );
    if ( !( setSpecialtyData instanceof static_src_js_components_user_set_data_js__WEBPACK_IMPORTED_MODULE_5__["SetData"] ) )
        throw new Error( 'setSpecialtyData inVaild' );

    setSpecialtyData.exec();
}
catch ( err ) {
    console.error( err );
}


/***/ }),

/***/ "./static/src/js/utils/language.js":
/*!*****************************************!*\
  !*** ./static/src/js/utils/language.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! models/common/utils/language.js */ "./models/common/utils/language.js");


class WebLanguageUtils extends models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static get currentLanguageId () {
        let languageId = new URLSearchParams( window.location.search ).get( 'languageId' );
        languageId = Number( languageId );
        if ( languageId && WebLanguageUtils.isSupportedLanguageId( languageId ) )
            return languageId;
        return models_common_utils_language_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultLanguageId;
    }
}

/* harmony default export */ __webpack_exports__["default"] = (WebLanguageUtils);


/***/ }),

/***/ "./static/src/js/utils/style.js":
/*!**************************************!*\
  !*** ./static/src/js/utils/style.js ***!
  \**************************************/
/*! exports provided: classAdd, classRemove, delay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classAdd", function() { return classAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classRemove", function() { return classRemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return delay; });
/* harmony import */ var models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! models/common/utils/validate.js */ "./models/common/utils/validate.js");


/**
 * Making sure there is no `className` class on the element before adding the `className` class to the classlist.
 */

function classAdd ( element, className ) {
    if ( !element.classList.contains( className ) )
        element.classList.add( className );
}

/**
 * Making sure there is `className` class on the element before removing the `className` class from the classlist.
 */

function classRemove ( element, className ) {
    if ( element.classList.contains( className ) )
        element.classList.remove( className );
}

/**
 * Delay required milliseconds.
 * @param {number} ms
 * @return {Promise}
 * @throws {TypeError}
 */

function delay ( ms = 1 ) {
    if ( !models_common_utils_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPositiveInteger( ms ) )
        throw new TypeError( 'Parameter `ms` should be a positive integer.' );
    return new Promise( res => setTimeout( res, ms ) );
}


/***/ }),

/***/ "./static/src/pug/components/user/dynamic-input-block.pug":
/*!****************************************************************!*\
  !*** ./static/src/pug/components/user/dynamic-input-block.pug ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pug = __webpack_require__(/*! ../../../../../node_modules/pug-runtime/index.js */ "./node_modules/pug-runtime/index.js");

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;;var locals_for_with = (locals || {});(function (data) {
pug_html = pug_html + "\u003Csection" + (pug.attr("class", pug.classes(["input-block",`${ data.info.modifier }__input-block ${ data.info.modifier }__input-block--${ data.info.modifier }`], [false,true]), false, true)+pug.attr("id", `${ data.modifier }-${ data.id }`, true, true)) + "\u003E\u003Cmain class=\"input-block__block block\"\u003E \u003Carticle class=\"block__content content\"\u003E\u003Cp class=\"content__word\"\u003E" + (pug.escape(null == (pug_interp = data.info.content) ? "" : pug_interp)) + "\u003C\u002Fp\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["content__remove",`content__remove--${ data.info.modifier }-${ data.info.id }`], [false,true]), false, true)) + "\u003E" + (pug.escape(null == (pug_interp = data.button.remove) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["content__modify",`content__modify--${ data.info.modifier }-${ data.info.id }`], [false,true]), false, true)) + "\u003E" + (pug.escape(null == (pug_interp = data.button.modify) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E\u003C\u002Farticle\u003E\u003C\u002Fmain\u003E\u003C\u002Fsection\u003E";}.call(this,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined));;return pug_html;};
module.exports = template;

/***/ }),

/***/ "./static/src/pug/components/user/edit-page-content.pug":
/*!**************************************************************!*\
  !*** ./static/src/pug/components/user/edit-page-content.pug ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pug = __webpack_require__(/*! ../../../../../node_modules/pug-runtime/index.js */ "./node_modules/pug-runtime/index.js");

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;;var locals_for_with = (locals || {});(function (content, data, dataType, dbTableItem, flag, from, i18n, languageId, localTopic, name, nameFrom, nameTo, placeholder, to, top, type, value, valueFrom, valueTo) {
pug_html = pug_html + "\u003Carticle class=\"info__input\" id=\"input\"\u003E";
if (type === 'text') {
pug_html = pug_html + "\u003Csection class=\"input__text\"\u003E";
if (flag !== null) {
pug_html = pug_html + "\u003Cimg" + (" class=\"input__flag\""+pug.attr("src", flag, true, true)+" alt=\"&gt;\"") + "\u003E";
}
if (content !== null) {
pug_html = pug_html + "\u003Cinput" + (" class=\"input__content\""+pug.attr("placeholder", placeholder, true, true)+pug.attr("type", dataType, true, true)+pug.attr("value", value, true, true)+pug.attr("name", name, true, true)+pug.attr("dbTableItem", dbTableItem, true, true)+pug.attr("languageId", languageId, true, true)+pug.attr("i18n", i18n, true, true)) + "\u003E";
}
pug_html = pug_html + "\u003C\u002Fsection\u003E";
}
else
if (type === 'time') {
pug_html = pug_html + "\u003Carticle class=\"input__time time\"\u003E\u003Caside class=\"time__from from\"\u003E\u003Clabel class=\"from__text\"\u003E" + (pug.escape(null == (pug_interp = from) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003Cspan class=\"from__input input\"\u003E\u003Cinput" + (" class=\"input__year\""+" type=\"number\""+pug.attr("value", valueFrom, true, true)+" dbTableItem=\"from\" placeholder=\"yyyy\""+pug.attr("name", nameFrom, true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Faside\u003E\u003Caside class=\"time__to to\"\u003E\u003Clabel class=\"to__text\"\u003E" + (pug.escape(null == (pug_interp = to) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003Cspan class=\"to__input input\"\u003E\u003Cinput" + (" class=\"input__year\""+" type=\"number\""+pug.attr("value", valueTo, true, true)+" placeholder=\"yyyy\""+pug.attr("name", nameTo, true, true)+" dbTableItem=\"to\"") + "\u003E\u003C\u002Fspan\u003E\u003C\u002Faside\u003E\u003C\u002Farticle\u003E";
}
else
if (type === 'local-topic') {
pug_html = pug_html + "\u003Csection class=\"input__local-topic local-topic\"\u003E \u003Cp class=\"local-topic__text\"\u003E" + (pug.escape(null == (pug_interp = localTopic) ? "" : pug_interp)) + "\u003C\u002Fp\u003E\u003C\u002Fsection\u003E";
}
else
if (type === 'dropdown') {
pug_html = pug_html + "\u003Csection class=\"input__dropdown dropdown\"\u003E\u003Csection class=\"dropdown__top\"\u003E" + (pug.escape(null == (pug_interp = top) ? "" : pug_interp)) + "\u003C\u002Fsection\u003E\u003Carticle class=\"dropdown__button button\"\u003E\u003Cinput" + (" class=\"button__submit\""+" type=\"hidden\""+pug.attr("name", name, true, true)+pug.attr("value", value, true, true)+pug.attr("dbTableItem", dbTableItem, true, true)) + "\u003E\u003Csection class=\"button__content content\"\u003E";
// iterate data  
;(function(){
  var $$obj = data  ;
  if ('number' == typeof $$obj.length) {
      for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
        var val = $$obj[index];
pug_html = pug_html + "\u003Csection" + (" class=\"content__item\""+pug.attr("value", index, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fsection\u003E";
      }
  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;
      var val = $$obj[index];
pug_html = pug_html + "\u003Csection" + (" class=\"content__item\""+pug.attr("value", index, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fsection\u003E";
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fsection\u003E\u003C\u002Farticle\u003E\u003C\u002Fsection\u003E";
}
pug_html = pug_html + "\u003C\u002Farticle\u003E";}.call(this,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined,"dataType" in locals_for_with?locals_for_with.dataType:typeof dataType!=="undefined"?dataType:undefined,"dbTableItem" in locals_for_with?locals_for_with.dbTableItem:typeof dbTableItem!=="undefined"?dbTableItem:undefined,"flag" in locals_for_with?locals_for_with.flag:typeof flag!=="undefined"?flag:undefined,"from" in locals_for_with?locals_for_with.from:typeof from!=="undefined"?from:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"languageId" in locals_for_with?locals_for_with.languageId:typeof languageId!=="undefined"?languageId:undefined,"localTopic" in locals_for_with?locals_for_with.localTopic:typeof localTopic!=="undefined"?localTopic:undefined,"name" in locals_for_with?locals_for_with.name:typeof name!=="undefined"?name:undefined,"nameFrom" in locals_for_with?locals_for_with.nameFrom:typeof nameFrom!=="undefined"?nameFrom:undefined,"nameTo" in locals_for_with?locals_for_with.nameTo:typeof nameTo!=="undefined"?nameTo:undefined,"placeholder" in locals_for_with?locals_for_with.placeholder:typeof placeholder!=="undefined"?placeholder:undefined,"to" in locals_for_with?locals_for_with.to:typeof to!=="undefined"?to:undefined,"top" in locals_for_with?locals_for_with.top:typeof top!=="undefined"?top:undefined,"type" in locals_for_with?locals_for_with.type:typeof type!=="undefined"?type:undefined,"value" in locals_for_with?locals_for_with.value:typeof value!=="undefined"?value:undefined,"valueFrom" in locals_for_with?locals_for_with.valueFrom:typeof valueFrom!=="undefined"?valueFrom:undefined,"valueTo" in locals_for_with?locals_for_with.valueTo:typeof valueTo!=="undefined"?valueTo:undefined));;return pug_html;};
module.exports = template;

/***/ }),

/***/ "./static/src/pug/components/user/edit-page.pug":
/*!******************************************************!*\
  !*** ./static/src/pug/components/user/edit-page.pug ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pug = __webpack_require__(/*! ../../../../../node_modules/pug-runtime/index.js */ "./node_modules/pug-runtime/index.js");

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;;var locals_for_with = (locals || {});(function (cancel, check, topic, url) {
pug_html = pug_html + "\u003Csection class=\"edit-page__window window\"\u003E\u003Cform" + (" class=\"window__form form\""+" id=\"form\""+pug.attr("action", url, true, true)+" method=\"POST\"") + "\u003E\u003Cmain class=\"form__content content\" id=\"content\"\u003E\u003Carticle class=\"content__title\"\u003E\u003Ch1 class=\"title__word\"\u003E" + (pug.escape(null == (pug_interp = topic) ? "" : pug_interp)) + "\u003C\u002Fh1\u003E\u003C\u002Farticle\u003E\u003Carticle class=\"content__info\" id=\"info\"\u003E\u003C\u002Farticle\u003E\u003Carticle class=\"content__error error\"\u003E\u003Ch1 class=\"error__message\" id=\"error-message\"\u003E\u003C\u002Fh1\u003E\u003C\u002Farticle\u003E\u003C\u002Fmain\u003E\u003Carticle class=\"form__button button\"\u003E\u003Cbutton class=\"button__item button__item--cancel\" formnovalidate\u003E" + (pug.escape(null == (pug_interp = cancel) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E\u003Cbutton class=\"button__item button__item--check\"\u003E" + (pug.escape(null == (pug_interp = check) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E\u003C\u002Farticle\u003E\u003C\u002Fform\u003E\u003C\u002Fsection\u003E";}.call(this,"cancel" in locals_for_with?locals_for_with.cancel:typeof cancel!=="undefined"?cancel:undefined,"check" in locals_for_with?locals_for_with.check:typeof check!=="undefined"?check:undefined,"topic" in locals_for_with?locals_for_with.topic:typeof topic!=="undefined"?topic:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return pug_html;};
module.exports = template;

/***/ }),

/***/ 0:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,